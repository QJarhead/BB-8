//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BB_8.WebApiNetTerrain {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class FaultInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeType", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class NodeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BackgroundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DefaultHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DefaultWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisplayRackLinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.DoubleClickBehaviors DoubleClickBehaviorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoubleClickBehaviorAttributeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long HBLabelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFavoriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool KeepAspectRatioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.NodeTypeGroups TypeGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long VendorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float WidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Background {
            get {
                return this.BackgroundField;
            }
            set {
                if ((object.ReferenceEquals(this.BackgroundField, value) != true)) {
                    this.BackgroundField = value;
                    this.RaisePropertyChanged("Background");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float DefaultHeight {
            get {
                return this.DefaultHeightField;
            }
            set {
                if ((this.DefaultHeightField.Equals(value) != true)) {
                    this.DefaultHeightField = value;
                    this.RaisePropertyChanged("DefaultHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float DefaultWidth {
            get {
                return this.DefaultWidthField;
            }
            set {
                if ((this.DefaultWidthField.Equals(value) != true)) {
                    this.DefaultWidthField = value;
                    this.RaisePropertyChanged("DefaultWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DisplayRackLines {
            get {
                return this.DisplayRackLinesField;
            }
            set {
                if ((this.DisplayRackLinesField.Equals(value) != true)) {
                    this.DisplayRackLinesField = value;
                    this.RaisePropertyChanged("DisplayRackLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.DoubleClickBehaviors DoubleClickBehavior {
            get {
                return this.DoubleClickBehaviorField;
            }
            set {
                if ((this.DoubleClickBehaviorField.Equals(value) != true)) {
                    this.DoubleClickBehaviorField = value;
                    this.RaisePropertyChanged("DoubleClickBehavior");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoubleClickBehaviorAttribute {
            get {
                return this.DoubleClickBehaviorAttributeField;
            }
            set {
                if ((object.ReferenceEquals(this.DoubleClickBehaviorAttributeField, value) != true)) {
                    this.DoubleClickBehaviorAttributeField = value;
                    this.RaisePropertyChanged("DoubleClickBehaviorAttribute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long HBLabelId {
            get {
                return this.HBLabelIdField;
            }
            set {
                if ((this.HBLabelIdField.Equals(value) != true)) {
                    this.HBLabelIdField = value;
                    this.RaisePropertyChanged("HBLabelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFavorite {
            get {
                return this.IsFavoriteField;
            }
            set {
                if ((this.IsFavoriteField.Equals(value) != true)) {
                    this.IsFavoriteField = value;
                    this.RaisePropertyChanged("IsFavorite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystem {
            get {
                return this.IsSystemField;
            }
            set {
                if ((this.IsSystemField.Equals(value) != true)) {
                    this.IsSystemField = value;
                    this.RaisePropertyChanged("IsSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KeepAspectRatio {
            get {
                return this.KeepAspectRatioField;
            }
            set {
                if ((this.KeepAspectRatioField.Equals(value) != true)) {
                    this.KeepAspectRatioField = value;
                    this.RaisePropertyChanged("KeepAspectRatio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TemplateId {
            get {
                return this.TemplateIdField;
            }
            set {
                if ((this.TemplateIdField.Equals(value) != true)) {
                    this.TemplateIdField = value;
                    this.RaisePropertyChanged("TemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.NodeTypeGroups TypeGroup {
            get {
                return this.TypeGroupField;
            }
            set {
                if ((this.TypeGroupField.Equals(value) != true)) {
                    this.TypeGroupField = value;
                    this.RaisePropertyChanged("TypeGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long VendorId {
            get {
                return this.VendorIdField;
            }
            set {
                if ((this.VendorIdField.Equals(value) != true)) {
                    this.VendorIdField = value;
                    this.RaisePropertyChanged("VendorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoubleClickBehaviors", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum DoubleClickBehaviors : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DrillDown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GoToDiagram = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OpenURL = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeTypeGroups", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum NodeTypeGroups : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Node = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Document = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Comment = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stamp = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Shape = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Picture = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Device = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rack = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Port = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Slot = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Card = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LineNode = 12,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HierarchySearchModes", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum HierarchySearchModes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DiagramOnly = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        N_Levels = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Full = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdAccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOverrideAdGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdAccount {
            get {
                return this.IsAdAccountField;
            }
            set {
                if ((this.IsAdAccountField.Equals(value) != true)) {
                    this.IsAdAccountField = value;
                    this.RaisePropertyChanged("IsAdAccount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOverrideAdGroup {
            get {
                return this.IsOverrideAdGroupField;
            }
            set {
                if ((this.IsOverrideAdGroupField.Equals(value) != true)) {
                    this.IsOverrideAdGroupField = value;
                    this.RaisePropertyChanged("IsOverrideAdGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Roles", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum Roles : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoAccess = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ReadOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DiagramReadOnly = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Annotator = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updater = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Editor = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PowerUser = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Admin = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.Roles RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystem {
            get {
                return this.IsSystemField;
            }
            set {
                if ((this.IsSystemField.Equals(value) != true)) {
                    this.IsSystemField = value;
                    this.RaisePropertyChanged("IsSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.Roles Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileUploadAttributes", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class FileUploadAttributes : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.Stream FileByteStreamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ObjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.Stream FileByteStream {
            get {
                return this.FileByteStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.FileByteStreamField, value) != true)) {
                    this.FileByteStreamField = value;
                    this.RaisePropertyChanged("FileByteStream");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ObjectId {
            get {
                return this.ObjectIdField;
            }
            set {
                if ((this.ObjectIdField.Equals(value) != true)) {
                    this.ObjectIdField = value;
                    this.RaisePropertyChanged("ObjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextAligns", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum TextAligns : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Left = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Center = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Right = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FontFamilies", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum FontFamilies : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Arial = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ArialBlack = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ComicSansMS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CourierNew = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Georgia = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PalatinoLinotype = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tahoma = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TimesNewRoman = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TrebuchetMS = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LucidaSansUnicode = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LucidaConsole = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MSSerif = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Verdana = 12,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstanceEffects", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum InstanceEffects : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoEffect = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BlinkObject = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RectangleBlink = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RedTriangleIndicator = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OrangeTriangleIndicator = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreenTriangleIndicator = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkStyles", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum LinkStyles : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Solid = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dash = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DashDot = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DashDotDot = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dot = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OverrideRules", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum OverrideRules : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Equals = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Contains = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GreaterThan = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LowerThan = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpwardsPropagations", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum UpwardsPropagations : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoPropagations = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParentOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParentAndGrandparentOnly = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopLevelOnly = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllLevels = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArrowStyles", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum ArrowStyles : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plain = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Reversed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Solid = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SolidReversed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Open = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OpenReversed = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Triangle = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TriangleReversed = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TriangleSolid = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TriangleSolidReversed = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Diamond = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DiamondSolid = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Square = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SquareSolid = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Circle = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CircleSolid = 15,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewNodeTypeInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class NewNodeTypeInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DefaultHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DefaultWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.Stream ImageByteStreamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFavouriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeGroupNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float DefaultHeight {
            get {
                return this.DefaultHeightField;
            }
            set {
                if ((this.DefaultHeightField.Equals(value) != true)) {
                    this.DefaultHeightField = value;
                    this.RaisePropertyChanged("DefaultHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float DefaultWidth {
            get {
                return this.DefaultWidthField;
            }
            set {
                if ((this.DefaultWidthField.Equals(value) != true)) {
                    this.DefaultWidthField = value;
                    this.RaisePropertyChanged("DefaultWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.Stream ImageByteStream {
            get {
                return this.ImageByteStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageByteStreamField, value) != true)) {
                    this.ImageByteStreamField = value;
                    this.RaisePropertyChanged("ImageByteStream");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFavourite {
            get {
                return this.IsFavouriteField;
            }
            set {
                if ((this.IsFavouriteField.Equals(value) != true)) {
                    this.IsFavouriteField = value;
                    this.RaisePropertyChanged("IsFavourite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeGroupNumber {
            get {
                return this.TypeGroupNumberField;
            }
            set {
                if ((this.TypeGroupNumberField.Equals(value) != true)) {
                    this.TypeGroupNumberField = value;
                    this.RaisePropertyChanged("TypeGroupNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Slot", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class Slot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NodeTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float WidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NodeTypeId {
            get {
                return this.NodeTypeIdField;
            }
            set {
                if ((this.NodeTypeIdField.Equals(value) != true)) {
                    this.NodeTypeIdField = value;
                    this.RaisePropertyChanged("NodeTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RackContainer", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class RackContainer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PhysicalHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PhysicalWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RackTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float WidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float PhysicalHeight {
            get {
                return this.PhysicalHeightField;
            }
            set {
                if ((this.PhysicalHeightField.Equals(value) != true)) {
                    this.PhysicalHeightField = value;
                    this.RaisePropertyChanged("PhysicalHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float PhysicalWidth {
            get {
                return this.PhysicalWidthField;
            }
            set {
                if ((this.PhysicalWidthField.Equals(value) != true)) {
                    this.PhysicalWidthField = value;
                    this.RaisePropertyChanged("PhysicalWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RackTypeId {
            get {
                return this.RackTypeIdField;
            }
            set {
                if ((this.RackTypeIdField.Equals(value) != true)) {
                    this.RackTypeIdField = value;
                    this.RaisePropertyChanged("RackTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class Node : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.DoubleClickBehaviors DoubleClickBehaviorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long InsertUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MasterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NodeTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ParentDiagramIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.DoubleClickBehaviors DoubleClickBehavior {
            get {
                return this.DoubleClickBehaviorField;
            }
            set {
                if ((this.DoubleClickBehaviorField.Equals(value) != true)) {
                    this.DoubleClickBehaviorField = value;
                    this.RaisePropertyChanged("DoubleClickBehavior");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long InsertUserId {
            get {
                return this.InsertUserIdField;
            }
            set {
                if ((this.InsertUserIdField.Equals(value) != true)) {
                    this.InsertUserIdField = value;
                    this.RaisePropertyChanged("InsertUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MasterId {
            get {
                return this.MasterIdField;
            }
            set {
                if ((this.MasterIdField.Equals(value) != true)) {
                    this.MasterIdField = value;
                    this.RaisePropertyChanged("MasterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NodeTypeId {
            get {
                return this.NodeTypeIdField;
            }
            set {
                if ((this.NodeTypeIdField.Equals(value) != true)) {
                    this.NodeTypeIdField = value;
                    this.RaisePropertyChanged("NodeTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ParentDiagramId {
            get {
                return this.ParentDiagramIdField;
            }
            set {
                if ((this.ParentDiagramIdField.Equals(value) != true)) {
                    this.ParentDiagramIdField = value;
                    this.RaisePropertyChanged("ParentDiagramId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class Device : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.Node BaseNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ContainerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RackIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RackPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RackUnitsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.Node BaseNode {
            get {
                return this.BaseNodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseNodeField, value) != true)) {
                    this.BaseNodeField = value;
                    this.RaisePropertyChanged("BaseNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ContainerId {
            get {
                return this.ContainerIdField;
            }
            set {
                if ((this.ContainerIdField.Equals(value) != true)) {
                    this.ContainerIdField = value;
                    this.RaisePropertyChanged("ContainerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RackId {
            get {
                return this.RackIdField;
            }
            set {
                if ((this.RackIdField.Equals(value) != true)) {
                    this.RackIdField = value;
                    this.RaisePropertyChanged("RackId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float RackPosition {
            get {
                return this.RackPositionField;
            }
            set {
                if ((this.RackPositionField.Equals(value) != true)) {
                    this.RackPositionField = value;
                    this.RaisePropertyChanged("RackPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float RackUnits {
            get {
                return this.RackUnitsField;
            }
            set {
                if ((this.RackUnitsField.Equals(value) != true)) {
                    this.RackUnitsField = value;
                    this.RaisePropertyChanged("RackUnits");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rack", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class Rack : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.Node BaseNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisplayRackLinesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.Node BaseNode {
            get {
                return this.BaseNodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseNodeField, value) != true)) {
                    this.BaseNodeField = value;
                    this.RaisePropertyChanged("BaseNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DisplayRackLines {
            get {
                return this.DisplayRackLinesField;
            }
            set {
                if ((this.DisplayRackLinesField.Equals(value) != true)) {
                    this.DisplayRackLinesField = value;
                    this.RaisePropertyChanged("DisplayRackLines");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VisNode", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class VisNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanMoveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanResizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanRotateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DiagramIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageOverrideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsHiddenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool KeepAspectRatioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NodeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float WidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZOrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanMove {
            get {
                return this.CanMoveField;
            }
            set {
                if ((this.CanMoveField.Equals(value) != true)) {
                    this.CanMoveField = value;
                    this.RaisePropertyChanged("CanMove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanResize {
            get {
                return this.CanResizeField;
            }
            set {
                if ((this.CanResizeField.Equals(value) != true)) {
                    this.CanResizeField = value;
                    this.RaisePropertyChanged("CanResize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanRotate {
            get {
                return this.CanRotateField;
            }
            set {
                if ((this.CanRotateField.Equals(value) != true)) {
                    this.CanRotateField = value;
                    this.RaisePropertyChanged("CanRotate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DiagramId {
            get {
                return this.DiagramIdField;
            }
            set {
                if ((this.DiagramIdField.Equals(value) != true)) {
                    this.DiagramIdField = value;
                    this.RaisePropertyChanged("DiagramId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageOverride {
            get {
                return this.ImageOverrideField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageOverrideField, value) != true)) {
                    this.ImageOverrideField = value;
                    this.RaisePropertyChanged("ImageOverride");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHidden {
            get {
                return this.IsHiddenField;
            }
            set {
                if ((this.IsHiddenField.Equals(value) != true)) {
                    this.IsHiddenField = value;
                    this.RaisePropertyChanged("IsHidden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KeepAspectRatio {
            get {
                return this.KeepAspectRatioField;
            }
            set {
                if ((this.KeepAspectRatioField.Equals(value) != true)) {
                    this.KeepAspectRatioField = value;
                    this.RaisePropertyChanged("KeepAspectRatio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NodeId {
            get {
                return this.NodeIdField;
            }
            set {
                if ((this.NodeIdField.Equals(value) != true)) {
                    this.NodeIdField = value;
                    this.RaisePropertyChanged("NodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZOrder {
            get {
                return this.ZOrderField;
            }
            set {
                if ((this.ZOrderField.Equals(value) != true)) {
                    this.ZOrderField = value;
                    this.RaisePropertyChanged("ZOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Port", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class Port : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NodeTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.PortLayout PortLayoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.PortLayout ReferencePortLayoutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NodeTypeId {
            get {
                return this.NodeTypeIdField;
            }
            set {
                if ((this.NodeTypeIdField.Equals(value) != true)) {
                    this.NodeTypeIdField = value;
                    this.RaisePropertyChanged("NodeTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.PortLayout PortLayout {
            get {
                return this.PortLayoutField;
            }
            set {
                if ((object.ReferenceEquals(this.PortLayoutField, value) != true)) {
                    this.PortLayoutField = value;
                    this.RaisePropertyChanged("PortLayout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.PortLayout ReferencePortLayout {
            get {
                return this.ReferencePortLayoutField;
            }
            set {
                if ((object.ReferenceEquals(this.ReferencePortLayoutField, value) != true)) {
                    this.ReferencePortLayoutField = value;
                    this.RaisePropertyChanged("ReferencePortLayout");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortLayout", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class PortLayout : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float WidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkTypeProperty", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class LinkTypeProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisplayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FontColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.FontFamilies FontFamilyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTypeFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUniqueForAllTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUniqueForThisTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ItalicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.TextJustification JustificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LinkTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MandatoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float OffsetXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float OffsetYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.TextAligns TextAlignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UnderlineField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Bold {
            get {
                return this.BoldField;
            }
            set {
                if ((this.BoldField.Equals(value) != true)) {
                    this.BoldField = value;
                    this.RaisePropertyChanged("Bold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Displayed {
            get {
                return this.DisplayedField;
            }
            set {
                if ((this.DisplayedField.Equals(value) != true)) {
                    this.DisplayedField = value;
                    this.RaisePropertyChanged("Displayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillColor {
            get {
                return this.FillColorField;
            }
            set {
                if ((object.ReferenceEquals(this.FillColorField, value) != true)) {
                    this.FillColorField = value;
                    this.RaisePropertyChanged("FillColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FontColor {
            get {
                return this.FontColorField;
            }
            set {
                if ((object.ReferenceEquals(this.FontColorField, value) != true)) {
                    this.FontColorField = value;
                    this.RaisePropertyChanged("FontColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.FontFamilies FontFamily {
            get {
                return this.FontFamilyField;
            }
            set {
                if ((this.FontFamilyField.Equals(value) != true)) {
                    this.FontFamilyField = value;
                    this.RaisePropertyChanged("FontFamily");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FontSize {
            get {
                return this.FontSizeField;
            }
            set {
                if ((this.FontSizeField.Equals(value) != true)) {
                    this.FontSizeField = value;
                    this.RaisePropertyChanged("FontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInProperties {
            get {
                return this.IsInPropertiesField;
            }
            set {
                if ((this.IsInPropertiesField.Equals(value) != true)) {
                    this.IsInPropertiesField = value;
                    this.RaisePropertyChanged("IsInProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystem {
            get {
                return this.IsSystemField;
            }
            set {
                if ((this.IsSystemField.Equals(value) != true)) {
                    this.IsSystemField = value;
                    this.RaisePropertyChanged("IsSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTypeField {
            get {
                return this.IsTypeFieldField;
            }
            set {
                if ((this.IsTypeFieldField.Equals(value) != true)) {
                    this.IsTypeFieldField = value;
                    this.RaisePropertyChanged("IsTypeField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUniqueForAllTypes {
            get {
                return this.IsUniqueForAllTypesField;
            }
            set {
                if ((this.IsUniqueForAllTypesField.Equals(value) != true)) {
                    this.IsUniqueForAllTypesField = value;
                    this.RaisePropertyChanged("IsUniqueForAllTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUniqueForThisType {
            get {
                return this.IsUniqueForThisTypeField;
            }
            set {
                if ((this.IsUniqueForThisTypeField.Equals(value) != true)) {
                    this.IsUniqueForThisTypeField = value;
                    this.RaisePropertyChanged("IsUniqueForThisType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Italic {
            get {
                return this.ItalicField;
            }
            set {
                if ((this.ItalicField.Equals(value) != true)) {
                    this.ItalicField = value;
                    this.RaisePropertyChanged("Italic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.TextJustification Justification {
            get {
                return this.JustificationField;
            }
            set {
                if ((this.JustificationField.Equals(value) != true)) {
                    this.JustificationField = value;
                    this.RaisePropertyChanged("Justification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long LinkTypeId {
            get {
                return this.LinkTypeIdField;
            }
            set {
                if ((this.LinkTypeIdField.Equals(value) != true)) {
                    this.LinkTypeIdField = value;
                    this.RaisePropertyChanged("LinkTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockList {
            get {
                return this.LockListField;
            }
            set {
                if ((this.LockListField.Equals(value) != true)) {
                    this.LockListField = value;
                    this.RaisePropertyChanged("LockList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Mandatory {
            get {
                return this.MandatoryField;
            }
            set {
                if ((this.MandatoryField.Equals(value) != true)) {
                    this.MandatoryField = value;
                    this.RaisePropertyChanged("Mandatory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float OffsetX {
            get {
                return this.OffsetXField;
            }
            set {
                if ((this.OffsetXField.Equals(value) != true)) {
                    this.OffsetXField = value;
                    this.RaisePropertyChanged("OffsetX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float OffsetY {
            get {
                return this.OffsetYField;
            }
            set {
                if ((this.OffsetYField.Equals(value) != true)) {
                    this.OffsetYField = value;
                    this.RaisePropertyChanged("OffsetY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.TextAligns TextAlign {
            get {
                return this.TextAlignField;
            }
            set {
                if ((this.TextAlignField.Equals(value) != true)) {
                    this.TextAlignField = value;
                    this.RaisePropertyChanged("TextAlign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Underline {
            get {
                return this.UnderlineField;
            }
            set {
                if ((this.UnderlineField.Equals(value) != true)) {
                    this.UnderlineField = value;
                    this.RaisePropertyChanged("Underline");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextJustification", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    public enum TextJustification : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopLeft = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Center = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkType", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class LinkType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.ArrowStyles EndArrowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFavoriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMatchingPortConnectorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSnappedToEdgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.LinkStyles LinkStyleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.ArrowStyles StartArrowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ThicknessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.ArrowStyles EndArrow {
            get {
                return this.EndArrowField;
            }
            set {
                if ((this.EndArrowField.Equals(value) != true)) {
                    this.EndArrowField = value;
                    this.RaisePropertyChanged("EndArrow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFavorite {
            get {
                return this.IsFavoriteField;
            }
            set {
                if ((this.IsFavoriteField.Equals(value) != true)) {
                    this.IsFavoriteField = value;
                    this.RaisePropertyChanged("IsFavorite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMatchingPortConnectors {
            get {
                return this.IsMatchingPortConnectorsField;
            }
            set {
                if ((this.IsMatchingPortConnectorsField.Equals(value) != true)) {
                    this.IsMatchingPortConnectorsField = value;
                    this.RaisePropertyChanged("IsMatchingPortConnectors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSnappedToEdge {
            get {
                return this.IsSnappedToEdgeField;
            }
            set {
                if ((this.IsSnappedToEdgeField.Equals(value) != true)) {
                    this.IsSnappedToEdgeField = value;
                    this.RaisePropertyChanged("IsSnappedToEdge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystem {
            get {
                return this.IsSystemField;
            }
            set {
                if ((this.IsSystemField.Equals(value) != true)) {
                    this.IsSystemField = value;
                    this.RaisePropertyChanged("IsSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.LinkStyles LinkStyle {
            get {
                return this.LinkStyleField;
            }
            set {
                if ((this.LinkStyleField.Equals(value) != true)) {
                    this.LinkStyleField = value;
                    this.RaisePropertyChanged("LinkStyle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.ArrowStyles StartArrow {
            get {
                return this.StartArrowField;
            }
            set {
                if ((this.StartArrowField.Equals(value) != true)) {
                    this.StartArrowField = value;
                    this.RaisePropertyChanged("StartArrow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((this.ThicknessField.Equals(value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkOverride", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class LinkOverride : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.ArrowStyles EndArrowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOverrideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.LinkStyles LinkStyleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.OverrideRules RuleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.ArrowStyles StartArrowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ThicknessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.ArrowStyles EndArrow {
            get {
                return this.EndArrowField;
            }
            set {
                if ((this.EndArrowField.Equals(value) != true)) {
                    this.EndArrowField = value;
                    this.RaisePropertyChanged("EndArrow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOverride {
            get {
                return this.IsOverrideField;
            }
            set {
                if ((this.IsOverrideField.Equals(value) != true)) {
                    this.IsOverrideField = value;
                    this.RaisePropertyChanged("IsOverride");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.LinkStyles LinkStyle {
            get {
                return this.LinkStyleField;
            }
            set {
                if ((this.LinkStyleField.Equals(value) != true)) {
                    this.LinkStyleField = value;
                    this.RaisePropertyChanged("LinkStyle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ListValue {
            get {
                return this.ListValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ListValueField, value) != true)) {
                    this.ListValueField = value;
                    this.RaisePropertyChanged("ListValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PropertyId {
            get {
                return this.PropertyIdField;
            }
            set {
                if ((this.PropertyIdField.Equals(value) != true)) {
                    this.PropertyIdField = value;
                    this.RaisePropertyChanged("PropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.OverrideRules Rule {
            get {
                return this.RuleField;
            }
            set {
                if ((this.RuleField.Equals(value) != true)) {
                    this.RuleField = value;
                    this.RaisePropertyChanged("Rule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.ArrowStyles StartArrow {
            get {
                return this.StartArrowField;
            }
            set {
                if ((this.StartArrowField.Equals(value) != true)) {
                    this.StartArrowField = value;
                    this.RaisePropertyChanged("StartArrow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((this.ThicknessField.Equals(value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkCategory", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class LinkCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFavoriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ParentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFavorite {
            get {
                return this.IsFavoriteField;
            }
            set {
                if ((this.IsFavoriteField.Equals(value) != true)) {
                    this.IsFavoriteField = value;
                    this.RaisePropertyChanged("IsFavorite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeOverride", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class NodeOverride : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.InstanceEffects InstanceEffectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOverrideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.InstanceEffects ParentEffectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.OverrideRules RuleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.UpwardsPropagations UpwardsPropagationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.InstanceEffects InstanceEffect {
            get {
                return this.InstanceEffectField;
            }
            set {
                if ((this.InstanceEffectField.Equals(value) != true)) {
                    this.InstanceEffectField = value;
                    this.RaisePropertyChanged("InstanceEffect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOverride {
            get {
                return this.IsOverrideField;
            }
            set {
                if ((this.IsOverrideField.Equals(value) != true)) {
                    this.IsOverrideField = value;
                    this.RaisePropertyChanged("IsOverride");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ListValue {
            get {
                return this.ListValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ListValueField, value) != true)) {
                    this.ListValueField = value;
                    this.RaisePropertyChanged("ListValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.InstanceEffects ParentEffect {
            get {
                return this.ParentEffectField;
            }
            set {
                if ((this.ParentEffectField.Equals(value) != true)) {
                    this.ParentEffectField = value;
                    this.RaisePropertyChanged("ParentEffect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PropertyId {
            get {
                return this.PropertyIdField;
            }
            set {
                if ((this.PropertyIdField.Equals(value) != true)) {
                    this.PropertyIdField = value;
                    this.RaisePropertyChanged("PropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.OverrideRules Rule {
            get {
                return this.RuleField;
            }
            set {
                if ((this.RuleField.Equals(value) != true)) {
                    this.RuleField = value;
                    this.RaisePropertyChanged("Rule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.UpwardsPropagations UpwardsPropagation {
            get {
                return this.UpwardsPropagationField;
            }
            set {
                if ((this.UpwardsPropagationField.Equals(value) != true)) {
                    this.UpwardsPropagationField = value;
                    this.RaisePropertyChanged("UpwardsPropagation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeTypeProperty", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class NodeTypeProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisplayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FillColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FontColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.FontFamilies FontFamilyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FontSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTypeFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUniqueForAllTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUniqueForThisTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ItalicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.TextJustification JustificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MandatoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long NodeTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NotEditableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float OffsetXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float OffsetYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.TextAligns TextAlignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UnderlineField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Bold {
            get {
                return this.BoldField;
            }
            set {
                if ((this.BoldField.Equals(value) != true)) {
                    this.BoldField = value;
                    this.RaisePropertyChanged("Bold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Displayed {
            get {
                return this.DisplayedField;
            }
            set {
                if ((this.DisplayedField.Equals(value) != true)) {
                    this.DisplayedField = value;
                    this.RaisePropertyChanged("Displayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FillColor {
            get {
                return this.FillColorField;
            }
            set {
                if ((object.ReferenceEquals(this.FillColorField, value) != true)) {
                    this.FillColorField = value;
                    this.RaisePropertyChanged("FillColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FontColor {
            get {
                return this.FontColorField;
            }
            set {
                if ((object.ReferenceEquals(this.FontColorField, value) != true)) {
                    this.FontColorField = value;
                    this.RaisePropertyChanged("FontColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.FontFamilies FontFamily {
            get {
                return this.FontFamilyField;
            }
            set {
                if ((this.FontFamilyField.Equals(value) != true)) {
                    this.FontFamilyField = value;
                    this.RaisePropertyChanged("FontFamily");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FontSize {
            get {
                return this.FontSizeField;
            }
            set {
                if ((this.FontSizeField.Equals(value) != true)) {
                    this.FontSizeField = value;
                    this.RaisePropertyChanged("FontSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInProperties {
            get {
                return this.IsInPropertiesField;
            }
            set {
                if ((this.IsInPropertiesField.Equals(value) != true)) {
                    this.IsInPropertiesField = value;
                    this.RaisePropertyChanged("IsInProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystem {
            get {
                return this.IsSystemField;
            }
            set {
                if ((this.IsSystemField.Equals(value) != true)) {
                    this.IsSystemField = value;
                    this.RaisePropertyChanged("IsSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTypeField {
            get {
                return this.IsTypeFieldField;
            }
            set {
                if ((this.IsTypeFieldField.Equals(value) != true)) {
                    this.IsTypeFieldField = value;
                    this.RaisePropertyChanged("IsTypeField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUniqueForAllTypes {
            get {
                return this.IsUniqueForAllTypesField;
            }
            set {
                if ((this.IsUniqueForAllTypesField.Equals(value) != true)) {
                    this.IsUniqueForAllTypesField = value;
                    this.RaisePropertyChanged("IsUniqueForAllTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUniqueForThisType {
            get {
                return this.IsUniqueForThisTypeField;
            }
            set {
                if ((this.IsUniqueForThisTypeField.Equals(value) != true)) {
                    this.IsUniqueForThisTypeField = value;
                    this.RaisePropertyChanged("IsUniqueForThisType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Italic {
            get {
                return this.ItalicField;
            }
            set {
                if ((this.ItalicField.Equals(value) != true)) {
                    this.ItalicField = value;
                    this.RaisePropertyChanged("Italic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.TextJustification Justification {
            get {
                return this.JustificationField;
            }
            set {
                if ((this.JustificationField.Equals(value) != true)) {
                    this.JustificationField = value;
                    this.RaisePropertyChanged("Justification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockList {
            get {
                return this.LockListField;
            }
            set {
                if ((this.LockListField.Equals(value) != true)) {
                    this.LockListField = value;
                    this.RaisePropertyChanged("LockList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Mandatory {
            get {
                return this.MandatoryField;
            }
            set {
                if ((this.MandatoryField.Equals(value) != true)) {
                    this.MandatoryField = value;
                    this.RaisePropertyChanged("Mandatory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long NodeTypeId {
            get {
                return this.NodeTypeIdField;
            }
            set {
                if ((this.NodeTypeIdField.Equals(value) != true)) {
                    this.NodeTypeIdField = value;
                    this.RaisePropertyChanged("NodeTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NotEditable {
            get {
                return this.NotEditableField;
            }
            set {
                if ((this.NotEditableField.Equals(value) != true)) {
                    this.NotEditableField = value;
                    this.RaisePropertyChanged("NotEditable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float OffsetX {
            get {
                return this.OffsetXField;
            }
            set {
                if ((this.OffsetXField.Equals(value) != true)) {
                    this.OffsetXField = value;
                    this.RaisePropertyChanged("OffsetX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float OffsetY {
            get {
                return this.OffsetYField;
            }
            set {
                if ((this.OffsetYField.Equals(value) != true)) {
                    this.OffsetYField = value;
                    this.RaisePropertyChanged("OffsetY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.TextAligns TextAlign {
            get {
                return this.TextAlignField;
            }
            set {
                if ((this.TextAlignField.Equals(value) != true)) {
                    this.TextAlignField = value;
                    this.RaisePropertyChanged("TextAlign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Underline {
            get {
                return this.UnderlineField;
            }
            set {
                if ((this.UnderlineField.Equals(value) != true)) {
                    this.UnderlineField = value;
                    this.RaisePropertyChanged("Underline");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vendor", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class Vendor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeCategory", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
    [System.SerializableAttribute()]
    public partial class NodeCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFavoriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ParentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BB_8.WebApiNetTerrain.NodeTypeGroups TypeGroupField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFavorite {
            get {
                return this.IsFavoriteField;
            }
            set {
                if ((this.IsFavoriteField.Equals(value) != true)) {
                    this.IsFavoriteField = value;
                    this.RaisePropertyChanged("IsFavorite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BB_8.WebApiNetTerrain.NodeTypeGroups TypeGroup {
            get {
                return this.TypeGroupField;
            }
            set {
                if ((this.TypeGroupField.Equals(value) != true)) {
                    this.TypeGroupField = value;
                    this.RaisePropertyChanged("TypeGroup");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextJustifications", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.Models")]
    public enum TextJustifications : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopLeft = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Center = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebApiNetTerrain.INetTerrainWebApi")]
    public interface INetTerrainWebApi {
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang CatalogNodeTypeUploadBackground weder in RPC noch in einem Dokument eingeschlossen ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadBackground", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadBackgroundResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadBackgroundFaultInfoFaul" +
            "t", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.CatalogNodeTypeUploadBackgroundResponse CatalogNodeTypeUploadBackground(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadBackground", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadBackgroundResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeTypeUploadBackgroundResponse> CatalogNodeTypeUploadBackgroundAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeTypeDelete(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeDeleteResponse")]
        System.Threading.Tasks.Task CatalogNodeTypeDeleteAsync(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeType CatalogNodeTypeGet(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeType> CatalogNodeTypeGetAsync(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeType CatalogNodeTypeGetByName(string nodeTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeType> CatalogNodeTypeGetByNameAsync(string nodeTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeTypeGetId", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeTypeGetIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeTypeGetIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long NodeTypeGetId(string nodeTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeTypeGetId", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeTypeGetIdResponse")]
        System.Threading.Tasks.Task<long> NodeTypeGetIdAsync(string nodeTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeTypeUpdate(BB_8.WebApiNetTerrain.NodeType nodeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUpdateResponse")]
        System.Threading.Tasks.Task CatalogNodeTypeUpdateAsync(BB_8.WebApiNetTerrain.NodeType nodeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetHeight", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetHeightResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramGetHeightFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        float DiagramGetHeight(long diagramId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetHeight", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetHeightResponse")]
        System.Threading.Tasks.Task<float> DiagramGetHeightAsync(long diagramId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetLinksByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetLinksByTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramGetLinksByTypeIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        System.Collections.Generic.Dictionary<long, string> DiagramGetLinksByTypeId(long diagramId, long linkTypeId, bool includeSubDiagrams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetLinksByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetLinksByTypeIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> DiagramGetLinksByTypeIdAsync(long diagramId, long linkTypeId, bool includeSubDiagrams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        System.Collections.Generic.Dictionary<long, string> DiagramGetNodesByTypeId(long diagramId, long nodeTypeId, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> DiagramGetNodesByTypeIdAsync(long diagramId, long nodeTypeId, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeGroup", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeGroupFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        System.Collections.Generic.Dictionary<long, string> DiagramGetNodesByTypeGroup(long diagramId, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeGroup", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetNodesByTypeGroupResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> DiagramGetNodesByTypeGroupAsync(long diagramId, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetMarginSize", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetMarginSizeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramGetMarginSizeFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        float DiagramGetMarginSize(long diagramId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetMarginSize", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetMarginSizeResponse")]
        System.Threading.Tasks.Task<float> DiagramGetMarginSizeAsync(long diagramId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetWidth", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetWidthResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramGetWidthFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        float DiagramGetWidth(long diagramId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramGetWidth", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramGetWidthResponse")]
        System.Threading.Tasks.Task<float> DiagramGetWidthAsync(long diagramId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/InstanceMoveToFront", ReplyAction="http://tempuri.org/INetTerrainWebApi/InstanceMoveToFrontResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/InstanceMoveToFrontFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void InstanceMoveToFront(long diagramId, long instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/InstanceMoveToFront", ReplyAction="http://tempuri.org/INetTerrainWebApi/InstanceMoveToFrontResponse")]
        System.Threading.Tasks.Task InstanceMoveToFrontAsync(long diagramId, long instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/InstanceSendToBack", ReplyAction="http://tempuri.org/INetTerrainWebApi/InstanceSendToBackResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/InstanceSendToBackFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void InstanceSendToBack(long diagramId, long instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/InstanceSendToBack", ReplyAction="http://tempuri.org/INetTerrainWebApi/InstanceSendToBackResponse")]
        System.Threading.Tasks.Task InstanceSendToBackAsync(long diagramId, long instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminUserAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long AdminUserAdd(string name, bool isAdAccount, bool overrideAdGroup, long groupId, string password, string email, string description, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserAddResponse")]
        System.Threading.Tasks.Task<long> AdminUserAddAsync(string name, bool isAdAccount, bool overrideAdGroup, long groupId, string password, string email, string description, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminUserDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void AdminUserDelete(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserDeleteResponse")]
        System.Threading.Tasks.Task AdminUserDeleteAsync(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminUserGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.User AdminUserGet(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.User> AdminUserGetAsync(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminUserGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.User AdminUserGetByName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.User> AdminUserGetByNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserSetPassword", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserSetPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminUserSetPasswordFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void AdminUserSetPassword(long userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserSetPassword", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserSetPasswordResponse")]
        System.Threading.Tasks.Task AdminUserSetPasswordAsync(long userId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminUserUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void AdminUserUpdate(BB_8.WebApiNetTerrain.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminUserUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminUserUpdateResponse")]
        System.Threading.Tasks.Task AdminUserUpdateAsync(BB_8.WebApiNetTerrain.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminGroupAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long AdminGroupAdd(string name, BB_8.WebApiNetTerrain.Roles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupAddResponse")]
        System.Threading.Tasks.Task<long> AdminGroupAddAsync(string name, BB_8.WebApiNetTerrain.Roles role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminGroupDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void AdminGroupDelete(long groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupDeleteResponse")]
        System.Threading.Tasks.Task AdminGroupDeleteAsync(long groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminGroupGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Group AdminGroupGet(long groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Group> AdminGroupGetAsync(long groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminGroupGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Group AdminGroupGetByName(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Group> AdminGroupGetByNameAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/AdminGroupUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void AdminGroupUpdate(BB_8.WebApiNetTerrain.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/AdminGroupUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/AdminGroupUpdateResponse")]
        System.Threading.Tasks.Task AdminGroupUpdateAsync(BB_8.WebApiNetTerrain.Group group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/TestConnection", ReplyAction="http://tempuri.org/INetTerrainWebApi/TestConnectionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(object), Action="http://tempuri.org/INetTerrainWebApi/TestConnectionObjectFault", Name="anyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        void TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/TestConnection", ReplyAction="http://tempuri.org/INetTerrainWebApi/TestConnectionResponse")]
        System.Threading.Tasks.Task TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/LinkDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void LinkDelete(long linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkDeleteResponse")]
        System.Threading.Tasks.Task LinkDeleteAsync(long linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        string LinkGetPropertyValue(long linkId, long linkPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueResponse")]
        System.Threading.Tasks.Task<string> LinkGetPropertyValueAsync(long linkId, long linkPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        string LinkGetPropertyValueByName(long linkId, string linkPropertyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkGetPropertyValueByNameResponse")]
        System.Threading.Tasks.Task<string> LinkGetPropertyValueByNameAsync(long linkId, string linkPropertyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkGetTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkGetTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/LinkGetTypeIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long LinkGetTypeId(long linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkGetTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkGetTypeIdResponse")]
        System.Threading.Tasks.Task<long> LinkGetTypeIdAsync(long linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkInsert", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkInsertResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/LinkInsertFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long LinkInsert(string name, long typeId, long node1Id, long node2Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkInsert", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkInsertResponse")]
        System.Threading.Tasks.Task<long> LinkInsertAsync(string name, long typeId, long node1Id, long node2Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkPropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkPropertyUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/LinkPropertyUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void LinkPropertyUpdate(long linkId, long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkPropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkPropertyUpdateResponse")]
        System.Threading.Tasks.Task LinkPropertyUpdateAsync(long linkId, long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodeDelete(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeDeleteResponse")]
        System.Threading.Tasks.Task NodeDeleteAsync(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        string NodeGetPropertyValue(long nodeId, long nodePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueResponse")]
        System.Threading.Tasks.Task<string> NodeGetPropertyValueAsync(long nodeId, long nodePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        string NodeGetPropertyValueByName(long nodeId, string nodePropertyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetPropertyValueByNameResponse")]
        System.Threading.Tasks.Task<string> NodeGetPropertyValueByNameAsync(long nodeId, string nodePropertyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeGetTypeIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long NodeGetTypeId(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetTypeIdResponse")]
        System.Threading.Tasks.Task<long> NodeGetTypeIdAsync(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetTypeGroup", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetTypeGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeGetTypeGroupFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeTypeGroups NodeGetTypeGroup(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeGetTypeGroup", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeGetTypeGroupResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeTypeGroups> NodeGetTypeGroupAsync(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeInsert", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeInsertResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeInsertFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long NodeInsert(string name, long parentId, long typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeInsert", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeInsertResponse")]
        System.Threading.Tasks.Task<long> NodeInsertAsync(string name, long parentId, long typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodePropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodePropertyUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodePropertyUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodePropertyUpdate(long nodeId, long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodePropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodePropertyUpdateResponse")]
        System.Threading.Tasks.Task NodePropertyUpdateAsync(long nodeId, long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeReparent", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeReparentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeReparentFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodeReparent(long nodeId, long newParentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeReparent", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeReparentResponse")]
        System.Threading.Tasks.Task NodeReparentAsync(long nodeId, long newParentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetCanMove", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetCanMoveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeSetCanMoveFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodeSetCanMove(long diagramId, long nodeId, bool canMove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetCanMove", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetCanMoveResponse")]
        System.Threading.Tasks.Task NodeSetCanMoveAsync(long diagramId, long nodeId, bool canMove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetHeight", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetHeightResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeSetHeightFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodeSetHeight(long diagramId, long nodeId, float height);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetHeight", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetHeightResponse")]
        System.Threading.Tasks.Task NodeSetHeightAsync(long diagramId, long nodeId, float height);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetWidth", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetWidthResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeSetWidthFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodeSetWidth(long diagramId, long nodeId, float width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetWidth", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetWidthResponse")]
        System.Threading.Tasks.Task NodeSetWidthAsync(long diagramId, long nodeId, float width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetX", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetXResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeSetXFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodeSetX(long diagramId, long nodeId, float x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetX", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetXResponse")]
        System.Threading.Tasks.Task NodeSetXAsync(long diagramId, long nodeId, float x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetY", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetYResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodeSetYFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void NodeSetY(long diagramId, long nodeId, float y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodeSetY", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodeSetYResponse")]
        System.Threading.Tasks.Task NodeSetYAsync(long diagramId, long nodeId, float y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodesGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodesGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/NodesGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] NodesGetByName(string nodeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/NodesGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/NodesGetByNameResponse")]
        System.Threading.Tasks.Task<long[]> NodesGetByNameAsync(string nodeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/VisNodeSetAttribute", ReplyAction="http://tempuri.org/INetTerrainWebApi/VisNodeSetAttributeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/VisNodeSetAttributeFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void VisNodeSetAttribute(long diagramId, long nodeId, System.Collections.Generic.Dictionary<string, string> attributes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/VisNodeSetAttribute", ReplyAction="http://tempuri.org/INetTerrainWebApi/VisNodeSetAttributeResponse")]
        System.Threading.Tasks.Task VisNodeSetAttributeAsync(long diagramId, long nodeId, System.Collections.Generic.Dictionary<string, string> attributes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/GetDatabaseValues", ReplyAction="http://tempuri.org/INetTerrainWebApi/GetDatabaseValuesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/GetDatabaseValuesFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        string[] GetDatabaseValues(string table, string columnName, string columnValue, string resultColumnName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/GetDatabaseValues", ReplyAction="http://tempuri.org/INetTerrainWebApi/GetDatabaseValuesResponse")]
        System.Threading.Tasks.Task<string[]> GetDatabaseValuesAsync(string table, string columnName, string columnValue, string resultColumnName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogSlotAdd(long nodeTypeId, string slotName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotAddResponse")]
        System.Threading.Tasks.Task<long> CatalogSlotAddAsync(long nodeTypeId, string slotName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogSlotDelete(long slotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotDeleteResponse")]
        System.Threading.Tasks.Task CatalogSlotDeleteAsync(long slotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Slot CatalogSlotGet(long slotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Slot> CatalogSlotGetAsync(long slotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetByNodeTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetByNodeTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetByNodeTypeIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogSlotsGetByNodeTypeId(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetByNodeTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetByNodeTypeIdResponse")]
        System.Threading.Tasks.Task<long[]> CatalogSlotsGetByNodeTypeIdAsync(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogSlotUpdate(BB_8.WebApiNetTerrain.Slot slot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotUpdateResponse")]
        System.Threading.Tasks.Task CatalogSlotUpdateAsync(BB_8.WebApiNetTerrain.Slot slot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotMapCardType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotMapCardTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotMapCardTypeFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogSlotMapCardType(long slotId, long cardTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotMapCardType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotMapCardTypeResponse")]
        System.Threading.Tasks.Task CatalogSlotMapCardTypeAsync(long slotId, long cardTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotUnmapCardType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotUnmapCardTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotUnmapCardTypeFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogSlotUnmapCardType(long slotId, long cardTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotUnmapCardType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotUnmapCardTypeResponse")]
        System.Threading.Tasks.Task CatalogSlotUnmapCardTypeAsync(long slotId, long cardTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetMappedCardTypes", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetMappedCardTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetMappedCardTypesFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogSlotGetMappedCardTypes(long slotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetMappedCardTypes", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotGetMappedCardTypesResponse")]
        System.Threading.Tasks.Task<long[]> CatalogSlotGetMappedCardTypesAsync(long slotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetAllWithMappedCardType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetAllWithMappedCardTypeResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetAllWithMappedCardTypeFaultInf" +
            "oFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogSlotsGetAllWithMappedCardType(long cardTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetAllWithMappedCardType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogSlotsGetAllWithMappedCardTypeResponse" +
            "")]
        System.Threading.Tasks.Task<long[]> CatalogSlotsGetAllWithMappedCardTypeAsync(long cardTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogRackContainerAdd(long rackTypeId, string rackContainerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerAddResponse")]
        System.Threading.Tasks.Task<long> CatalogRackContainerAddAsync(long rackTypeId, string rackContainerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogRackContainerDelete(long rackContainerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerDeleteResponse")]
        System.Threading.Tasks.Task CatalogRackContainerDeleteAsync(long rackContainerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.RackContainer CatalogRackContainerGet(long rackContainerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.RackContainer> CatalogRackContainerGetAsync(long rackContainerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainersGetByRackTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainersGetByRackTypeIdResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainersGetByRackTypeIdFaultInf" +
            "oFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogRackContainersGetByRackTypeId(long rackTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainersGetByRackTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainersGetByRackTypeIdResponse" +
            "")]
        System.Threading.Tasks.Task<long[]> CatalogRackContainersGetByRackTypeIdAsync(long rackTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogRackContainerUpdate(BB_8.WebApiNetTerrain.RackContainer rackContainer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogRackContainerUpdateResponse")]
        System.Threading.Tasks.Task CatalogRackContainerUpdateAsync(BB_8.WebApiNetTerrain.RackContainer rackContainer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramNodeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramNodeGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramNodeGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Node DiagramNodeGet(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramNodeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramNodeGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Node> DiagramNodeGetAsync(long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramDeviceGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramDeviceGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramDeviceGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Device DiagramDeviceGet(long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramDeviceGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramDeviceGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Device> DiagramDeviceGetAsync(long deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramRackGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramRackGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramRackGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Rack DiagramRackGet(long rackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramRackGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramRackGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Rack> DiagramRackGetAsync(long rackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.VisNode DiagramVisNodeGet(long visNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.VisNode> DiagramVisNodeGetAsync(long visNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetByDiagramAndNodeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetByDiagramAndNodeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetByDiagramAndNodeIdFaultInfo" +
            "Fault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.VisNode DiagramVisNodeGetByDiagramAndNodeId(long diagramId, long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetByDiagramAndNodeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeGetByDiagramAndNodeIdResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.VisNode> DiagramVisNodeGetByDiagramAndNodeIdAsync(long diagramId, long nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void DiagramVisNodeUpdate(BB_8.WebApiNetTerrain.VisNode visNode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/DiagramVisNodeUpdateResponse")]
        System.Threading.Tasks.Task DiagramVisNodeUpdateAsync(BB_8.WebApiNetTerrain.VisNode visNode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogPortAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogPortAdd(long nodeTypeId, string portName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortAddResponse")]
        System.Threading.Tasks.Task<long> CatalogPortAddAsync(long nodeTypeId, string portName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogPortDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogPortDelete(long portId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortDeleteResponse")]
        System.Threading.Tasks.Task CatalogPortDeleteAsync(long portId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogPortGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Port CatalogPortGet(long portId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Port> CatalogPortGetAsync(long portId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortsGetByNodeTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortsGetByNodeTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogPortsGetByNodeTypeIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogPortsGetByNodeTypeId(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortsGetByNodeTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortsGetByNodeTypeIdResponse")]
        System.Threading.Tasks.Task<long[]> CatalogPortsGetByNodeTypeIdAsync(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogPortUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogPortUpdate(BB_8.WebApiNetTerrain.Port port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogPortUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogPortUpdateResponse")]
        System.Threading.Tasks.Task CatalogPortUpdateAsync(BB_8.WebApiNetTerrain.Port port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypeProperty", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypePropertyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypePropertyFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogAddLinkTypeProperty(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypeProperty", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypePropertyResponse")]
        System.Threading.Tasks.Task<long> CatalogAddLinkTypePropertyAsync(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogLinkTypePropertyAdd(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyAddResponse")]
        System.Threading.Tasks.Task<long> CatalogLinkTypePropertyAddAsync(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkTypePropertyDelete(long linkTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyDeleteResponse")]
        System.Threading.Tasks.Task CatalogLinkTypePropertyDeleteAsync(long linkTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkTypeProperty CatalogLinkTypePropertyGet(long linkTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkTypeProperty> CatalogLinkTypePropertyGetAsync(long linkTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetByNameFaultInfoFau" +
            "lt", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkTypeProperty CatalogLinkTypePropertyGetByName(string name, long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkTypeProperty> CatalogLinkTypePropertyGetByNameAsync(string name, long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkTypePropertyUpdate(BB_8.WebApiNetTerrain.LinkTypeProperty linkTypeProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypePropertyUpdateResponse")]
        System.Threading.Tasks.Task CatalogLinkTypePropertyUpdateAsync(BB_8.WebApiNetTerrain.LinkTypeProperty linkTypeProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogGetLinkTypeProperties", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogGetLinkTypePropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogGetLinkTypePropertiesFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        System.Collections.Generic.Dictionary<long, string> CatalogGetLinkTypeProperties(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogGetLinkTypeProperties", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogGetLinkTypePropertiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> CatalogGetLinkTypePropertiesAsync(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypeFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogAddLinkType(string name, bool isFavorite, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddLinkTypeResponse")]
        System.Threading.Tasks.Task<long> CatalogAddLinkTypeAsync(string name, bool isFavorite, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogLinkTypeAdd(string name, bool isFavorite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeAddResponse")]
        System.Threading.Tasks.Task<long> CatalogLinkTypeAddAsync(string name, bool isFavorite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeClone", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeCloneResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeCloneFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogLinkTypeClone(long linkTypeId, string clonedTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeClone", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeCloneResponse")]
        System.Threading.Tasks.Task<long> CatalogLinkTypeCloneAsync(long linkTypeId, string clonedTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkTypeDelete(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeDeleteResponse")]
        System.Threading.Tasks.Task CatalogLinkTypeDeleteAsync(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkType CatalogLinkTypeGet(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkType> CatalogLinkTypeGetAsync(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkType CatalogLinkTypeGetByName(string linkTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkType> CatalogLinkTypeGetByNameAsync(string linkTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkTypeGetId", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkTypeGetIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/LinkTypeGetIdFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long LinkTypeGetId(string linkTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/LinkTypeGetId", ReplyAction="http://tempuri.org/INetTerrainWebApi/LinkTypeGetIdResponse")]
        System.Threading.Tasks.Task<long> LinkTypeGetIdAsync(string linkTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkTypeUpdate(BB_8.WebApiNetTerrain.LinkType linkType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkTypeUpdateResponse")]
        System.Threading.Tasks.Task CatalogLinkTypeUpdateAsync(BB_8.WebApiNetTerrain.LinkType linkType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddListValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddListValueFaultInfoFaul" +
            "t", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogLinkOverrideAddListValue(long linkPropertyId, string listValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddListValueResponse")]
        System.Threading.Tasks.Task<long> CatalogLinkOverrideAddListValueAsync(long linkPropertyId, string listValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogLinkOverrideAdd(long linkPropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string color, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle, BB_8.WebApiNetTerrain.ArrowStyles startArrow, BB_8.WebApiNetTerrain.ArrowStyles endArrow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideAddResponse")]
        System.Threading.Tasks.Task<long> CatalogLinkOverrideAddAsync(long linkPropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string color, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle, BB_8.WebApiNetTerrain.ArrowStyles startArrow, BB_8.WebApiNetTerrain.ArrowStyles endArrow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkOverrideDelete(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideDeleteResponse")]
        System.Threading.Tasks.Task CatalogLinkOverrideDeleteAsync(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkOverride CatalogLinkOverrideGet(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkOverride> CatalogLinkOverrideGetAsync(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetByListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetByListValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetByListValueFaultInfoFa" +
            "ult", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkOverride CatalogLinkOverrideGetByListValue(long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetByListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideGetByListValueResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkOverride> CatalogLinkOverrideGetByListValueAsync(long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkOverrideUpdate(BB_8.WebApiNetTerrain.LinkOverride linkOverride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverrideUpdateResponse")]
        System.Threading.Tasks.Task CatalogLinkOverrideUpdateAsync(BB_8.WebApiNetTerrain.LinkOverride linkOverride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByPropertyId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByPropertyIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByPropertyIdFaultInfo" +
            "Fault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogLinkOverridesGetByPropertyId(long linkPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByPropertyId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByPropertyIdResponse")]
        System.Threading.Tasks.Task<long[]> CatalogLinkOverridesGetByPropertyIdAsync(long linkPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByTypeIdFaultInfoFaul" +
            "t", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogLinkOverridesGetByTypeId(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkOverridesGetByTypeIdResponse")]
        System.Threading.Tasks.Task<long[]> CatalogLinkOverridesGetByTypeIdAsync(long linkTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogLinkCategoryAdd(string name, long parentId, string imageFileName, bool isFavorite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryAddResponse")]
        System.Threading.Tasks.Task<long> CatalogLinkCategoryAddAsync(string name, long parentId, string imageFileName, bool isFavorite);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang CatalogLinkCategoryUploadImage weder in RPC noch in einem Dokument eingeschlossen ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUploadImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUploadImageFaultInfoFault" +
            "", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.CatalogLinkCategoryUploadImageResponse CatalogLinkCategoryUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUploadImageResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogLinkCategoryUploadImageResponse> CatalogLinkCategoryUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkCategoryDelete(long linkCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryDeleteResponse")]
        System.Threading.Tasks.Task CatalogLinkCategoryDeleteAsync(long linkCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkCategory CatalogLinkCategoryGet(long linkCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkCategory> CatalogLinkCategoryGetAsync(long linkCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.LinkCategory CatalogLinkCategoryGetByName(string linkCategoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkCategory> CatalogLinkCategoryGetByNameAsync(string linkCategoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogLinkCategoryUpdate(BB_8.WebApiNetTerrain.LinkCategory linkCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogLinkCategoryUpdateResponse")]
        System.Threading.Tasks.Task CatalogLinkCategoryUpdateAsync(BB_8.WebApiNetTerrain.LinkCategory linkCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddListValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddListValueFaultInfoFaul" +
            "t", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogNodeOverrideAddListValue(long nodePropertyId, string listValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddListValueResponse")]
        System.Threading.Tasks.Task<long> CatalogNodeOverrideAddListValueAsync(long nodePropertyId, string listValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogNodeOverrideAdd(long nodePropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string imageFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideAddResponse")]
        System.Threading.Tasks.Task<long> CatalogNodeOverrideAddAsync(long nodePropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string imageFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeOverrideDelete(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideDeleteResponse")]
        System.Threading.Tasks.Task CatalogNodeOverrideDeleteAsync(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeOverride CatalogNodeOverrideGet(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeOverride> CatalogNodeOverrideGetAsync(long overrideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetByListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetByListValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetByListValueFaultInfoFa" +
            "ult", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeOverride CatalogNodeOverrideGetByListValue(long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetByListValue", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideGetByListValueResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeOverride> CatalogNodeOverrideGetByListValueAsync(long propertyId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeOverrideUpdate(BB_8.WebApiNetTerrain.NodeOverride nodeOverride);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUpdateResponse")]
        System.Threading.Tasks.Task CatalogNodeOverrideUpdateAsync(BB_8.WebApiNetTerrain.NodeOverride nodeOverride);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang CatalogNodeOverrideUploadImage weder in RPC noch in einem Dokument eingeschlossen ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUploadImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUploadImageFaultInfoFault" +
            "", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.CatalogNodeOverrideUploadImageResponse CatalogNodeOverrideUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverrideUploadImageResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeOverrideUploadImageResponse> CatalogNodeOverrideUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByPropertyId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByPropertyIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByPropertyIdFaultInfo" +
            "Fault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogNodeOverridesGetByPropertyId(long nodePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByPropertyId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByPropertyIdResponse")]
        System.Threading.Tasks.Task<long[]> CatalogNodeOverridesGetByPropertyIdAsync(long nodePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByTypeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByTypeIdFaultInfoFaul" +
            "t", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long[] CatalogNodeOverridesGetByTypeId(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByTypeId", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeOverridesGetByTypeIdResponse")]
        System.Threading.Tasks.Task<long[]> CatalogNodeOverridesGetByTypeIdAsync(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogNodeTypePropertyAdd(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyAddResponse")]
        System.Threading.Tasks.Task<long> CatalogNodeTypePropertyAddAsync(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypeProperty", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypePropertyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypePropertyFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogAddNodeTypeProperty(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypeProperty", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypePropertyResponse")]
        System.Threading.Tasks.Task<long> CatalogAddNodeTypePropertyAsync(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeTypePropertyDelete(long nodeTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyDeleteResponse")]
        System.Threading.Tasks.Task CatalogNodeTypePropertyDeleteAsync(long nodeTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeTypeProperty CatalogNodeTypePropertyGet(long nodeTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeTypeProperty> CatalogNodeTypePropertyGetAsync(long nodeTypePropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetByNameFaultInfoFau" +
            "lt", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeTypeProperty CatalogNodeTypePropertyGetByName(string name, long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeTypeProperty> CatalogNodeTypePropertyGetByNameAsync(string name, long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeTypePropertyUpdate(BB_8.WebApiNetTerrain.NodeTypeProperty nodeTypeProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypePropertyUpdateResponse")]
        System.Threading.Tasks.Task CatalogNodeTypePropertyUpdateAsync(BB_8.WebApiNetTerrain.NodeTypeProperty nodeTypeProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogGetNodeTypeProperties", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogGetNodeTypePropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogGetNodeTypePropertiesFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        System.Collections.Generic.Dictionary<long, string> CatalogGetNodeTypeProperties(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogGetNodeTypeProperties", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogGetNodeTypePropertiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> CatalogGetNodeTypePropertiesAsync(long nodeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogVendorAdd(string vendorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorAddResponse")]
        System.Threading.Tasks.Task<long> CatalogVendorAddAsync(string vendorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogVendorDelete(long vendorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorDeleteResponse")]
        System.Threading.Tasks.Task CatalogVendorDeleteAsync(long vendorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Vendor CatalogVendorGet(long vendorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Vendor> CatalogVendorGetAsync(long vendorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.Vendor CatalogVendorGetByName(string vendorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Vendor> CatalogVendorGetByNameAsync(string vendorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogVendorUpdate(BB_8.WebApiNetTerrain.Vendor vendor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogVendorUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogVendorUpdateResponse")]
        System.Threading.Tasks.Task CatalogVendorUpdateAsync(BB_8.WebApiNetTerrain.Vendor vendor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogNodeCategoryAdd(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, long parentId, string imageFileName, bool isFavorite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryAddResponse")]
        System.Threading.Tasks.Task<long> CatalogNodeCategoryAddAsync(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, long parentId, string imageFileName, bool isFavorite);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang CatalogNodeCategoryUploadImage weder in RPC noch in einem Dokument eingeschlossen ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUploadImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUploadImageFaultInfoFault" +
            "", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.CatalogNodeCategoryUploadImageResponse CatalogNodeCategoryUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUploadImageResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeCategoryUploadImageResponse> CatalogNodeCategoryUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryDeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryDeleteFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeCategoryDelete(long nodeCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryDelete", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryDeleteResponse")]
        System.Threading.Tasks.Task CatalogNodeCategoryDeleteAsync(long nodeCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeCategory CatalogNodeCategoryGet(long nodeCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGet", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeCategory> CatalogNodeCategoryGetAsync(long nodeCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetByNameFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.NodeCategory CatalogNodeCategoryGetByName(string nodeCategoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetByName", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryGetByNameResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeCategory> CatalogNodeCategoryGetByNameAsync(string nodeCategoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUpdateFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        void CatalogNodeCategoryUpdate(BB_8.WebApiNetTerrain.NodeCategory nodeCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUpdate", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeCategoryUpdateResponse")]
        System.Threading.Tasks.Task CatalogNodeCategoryUpdateAsync(BB_8.WebApiNetTerrain.NodeCategory nodeCategory);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang CatalogAddNodeType weder in RPC noch in einem Dokument eingeschlossen ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypeFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.CatalogAddNodeTypeResponse CatalogAddNodeType(BB_8.WebApiNetTerrain.NewNodeTypeInfo1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeType", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogAddNodeTypeResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogAddNodeTypeResponse> CatalogAddNodeTypeAsync(BB_8.WebApiNetTerrain.NewNodeTypeInfo1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeAddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeAddFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogNodeTypeAdd(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, string imageFileName, bool isFavorite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeAdd", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeAddResponse")]
        System.Threading.Tasks.Task<long> CatalogNodeTypeAddAsync(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, string imageFileName, bool isFavorite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeClone", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeCloneResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeCloneFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        long CatalogNodeTypeClone(long nodeTypeId, string clonedTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeClone", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeCloneResponse")]
        System.Threading.Tasks.Task<long> CatalogNodeTypeCloneAsync(long nodeTypeId, string clonedTypeName);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang CatalogNodeTypeUploadImage weder in RPC noch in einem Dokument eingeschlossen ist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadImageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BB_8.WebApiNetTerrain.FaultInfo), Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadImageFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/NetTerrain.WebApi")]
        BB_8.WebApiNetTerrain.CatalogNodeTypeUploadImageResponse CatalogNodeTypeUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadImage", ReplyAction="http://tempuri.org/INetTerrainWebApi/CatalogNodeTypeUploadImageResponse")]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeTypeUploadImageResponse> CatalogNodeTypeUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadAttributes", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadAttributes1 {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long ObjectId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public FileUploadAttributes1() {
        }
        
        public FileUploadAttributes1(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.ObjectId = ObjectId;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CatalogNodeTypeUploadBackgroundResponse {
        
        public CatalogNodeTypeUploadBackgroundResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CatalogLinkCategoryUploadImageResponse {
        
        public CatalogLinkCategoryUploadImageResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CatalogNodeOverrideUploadImageResponse {
        
        public CatalogNodeOverrideUploadImageResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CatalogNodeCategoryUploadImageResponse {
        
        public CatalogNodeCategoryUploadImageResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NewNodeTypeInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class NewNodeTypeInfo1 {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public float DefaultHeight;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public float DefaultWidth;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string ImageFileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool IsEnabled;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool IsFavourite;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Name;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int TypeGroupNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream ImageByteStream;
        
        public NewNodeTypeInfo1() {
        }
        
        public NewNodeTypeInfo1(float DefaultHeight, float DefaultWidth, string ImageFileName, bool IsEnabled, bool IsFavourite, string Name, int TypeGroupNumber, System.IO.Stream ImageByteStream) {
            this.DefaultHeight = DefaultHeight;
            this.DefaultWidth = DefaultWidth;
            this.ImageFileName = ImageFileName;
            this.IsEnabled = IsEnabled;
            this.IsFavourite = IsFavourite;
            this.Name = Name;
            this.TypeGroupNumber = TypeGroupNumber;
            this.ImageByteStream = ImageByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CatalogAddNodeTypeResponse {
        
        public CatalogAddNodeTypeResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CatalogNodeTypeUploadImageResponse {
        
        public CatalogNodeTypeUploadImageResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INetTerrainWebApiChannel : BB_8.WebApiNetTerrain.INetTerrainWebApi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NetTerrainWebApiClient : System.ServiceModel.ClientBase<BB_8.WebApiNetTerrain.INetTerrainWebApi>, BB_8.WebApiNetTerrain.INetTerrainWebApi {
        
        public NetTerrainWebApiClient() {
        }
        
        public NetTerrainWebApiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NetTerrainWebApiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetTerrainWebApiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetTerrainWebApiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BB_8.WebApiNetTerrain.CatalogNodeTypeUploadBackgroundResponse BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeTypeUploadBackground(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeTypeUploadBackground(request);
        }
        
        public void CatalogNodeTypeUploadBackground(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            BB_8.WebApiNetTerrain.CatalogNodeTypeUploadBackgroundResponse retVal = ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeTypeUploadBackground(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeTypeUploadBackgroundResponse> BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeTypeUploadBackgroundAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeTypeUploadBackgroundAsync(request);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeTypeUploadBackgroundResponse> CatalogNodeTypeUploadBackgroundAsync(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            return ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeTypeUploadBackgroundAsync(inValue);
        }
        
        public void CatalogNodeTypeDelete(long nodeTypeId) {
            base.Channel.CatalogNodeTypeDelete(nodeTypeId);
        }
        
        public System.Threading.Tasks.Task CatalogNodeTypeDeleteAsync(long nodeTypeId) {
            return base.Channel.CatalogNodeTypeDeleteAsync(nodeTypeId);
        }
        
        public BB_8.WebApiNetTerrain.NodeType CatalogNodeTypeGet(long nodeTypeId) {
            return base.Channel.CatalogNodeTypeGet(nodeTypeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeType> CatalogNodeTypeGetAsync(long nodeTypeId) {
            return base.Channel.CatalogNodeTypeGetAsync(nodeTypeId);
        }
        
        public BB_8.WebApiNetTerrain.NodeType CatalogNodeTypeGetByName(string nodeTypeName) {
            return base.Channel.CatalogNodeTypeGetByName(nodeTypeName);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeType> CatalogNodeTypeGetByNameAsync(string nodeTypeName) {
            return base.Channel.CatalogNodeTypeGetByNameAsync(nodeTypeName);
        }
        
        public long NodeTypeGetId(string nodeTypeName) {
            return base.Channel.NodeTypeGetId(nodeTypeName);
        }
        
        public System.Threading.Tasks.Task<long> NodeTypeGetIdAsync(string nodeTypeName) {
            return base.Channel.NodeTypeGetIdAsync(nodeTypeName);
        }
        
        public void CatalogNodeTypeUpdate(BB_8.WebApiNetTerrain.NodeType nodeType) {
            base.Channel.CatalogNodeTypeUpdate(nodeType);
        }
        
        public System.Threading.Tasks.Task CatalogNodeTypeUpdateAsync(BB_8.WebApiNetTerrain.NodeType nodeType) {
            return base.Channel.CatalogNodeTypeUpdateAsync(nodeType);
        }
        
        public float DiagramGetHeight(long diagramId) {
            return base.Channel.DiagramGetHeight(diagramId);
        }
        
        public System.Threading.Tasks.Task<float> DiagramGetHeightAsync(long diagramId) {
            return base.Channel.DiagramGetHeightAsync(diagramId);
        }
        
        public System.Collections.Generic.Dictionary<long, string> DiagramGetLinksByTypeId(long diagramId, long linkTypeId, bool includeSubDiagrams) {
            return base.Channel.DiagramGetLinksByTypeId(diagramId, linkTypeId, includeSubDiagrams);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> DiagramGetLinksByTypeIdAsync(long diagramId, long linkTypeId, bool includeSubDiagrams) {
            return base.Channel.DiagramGetLinksByTypeIdAsync(diagramId, linkTypeId, includeSubDiagrams);
        }
        
        public System.Collections.Generic.Dictionary<long, string> DiagramGetNodesByTypeId(long diagramId, long nodeTypeId, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth) {
            return base.Channel.DiagramGetNodesByTypeId(diagramId, nodeTypeId, searchMode, searchDepth);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> DiagramGetNodesByTypeIdAsync(long diagramId, long nodeTypeId, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth) {
            return base.Channel.DiagramGetNodesByTypeIdAsync(diagramId, nodeTypeId, searchMode, searchDepth);
        }
        
        public System.Collections.Generic.Dictionary<long, string> DiagramGetNodesByTypeGroup(long diagramId, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth) {
            return base.Channel.DiagramGetNodesByTypeGroup(diagramId, typeGroup, searchMode, searchDepth);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> DiagramGetNodesByTypeGroupAsync(long diagramId, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, BB_8.WebApiNetTerrain.HierarchySearchModes searchMode, int searchDepth) {
            return base.Channel.DiagramGetNodesByTypeGroupAsync(diagramId, typeGroup, searchMode, searchDepth);
        }
        
        public float DiagramGetMarginSize(long diagramId) {
            return base.Channel.DiagramGetMarginSize(diagramId);
        }
        
        public System.Threading.Tasks.Task<float> DiagramGetMarginSizeAsync(long diagramId) {
            return base.Channel.DiagramGetMarginSizeAsync(diagramId);
        }
        
        public float DiagramGetWidth(long diagramId) {
            return base.Channel.DiagramGetWidth(diagramId);
        }
        
        public System.Threading.Tasks.Task<float> DiagramGetWidthAsync(long diagramId) {
            return base.Channel.DiagramGetWidthAsync(diagramId);
        }
        
        public void InstanceMoveToFront(long diagramId, long instanceId) {
            base.Channel.InstanceMoveToFront(diagramId, instanceId);
        }
        
        public System.Threading.Tasks.Task InstanceMoveToFrontAsync(long diagramId, long instanceId) {
            return base.Channel.InstanceMoveToFrontAsync(diagramId, instanceId);
        }
        
        public void InstanceSendToBack(long diagramId, long instanceId) {
            base.Channel.InstanceSendToBack(diagramId, instanceId);
        }
        
        public System.Threading.Tasks.Task InstanceSendToBackAsync(long diagramId, long instanceId) {
            return base.Channel.InstanceSendToBackAsync(diagramId, instanceId);
        }
        
        public long AdminUserAdd(string name, bool isAdAccount, bool overrideAdGroup, long groupId, string password, string email, string description, string comments) {
            return base.Channel.AdminUserAdd(name, isAdAccount, overrideAdGroup, groupId, password, email, description, comments);
        }
        
        public System.Threading.Tasks.Task<long> AdminUserAddAsync(string name, bool isAdAccount, bool overrideAdGroup, long groupId, string password, string email, string description, string comments) {
            return base.Channel.AdminUserAddAsync(name, isAdAccount, overrideAdGroup, groupId, password, email, description, comments);
        }
        
        public void AdminUserDelete(long userId) {
            base.Channel.AdminUserDelete(userId);
        }
        
        public System.Threading.Tasks.Task AdminUserDeleteAsync(long userId) {
            return base.Channel.AdminUserDeleteAsync(userId);
        }
        
        public BB_8.WebApiNetTerrain.User AdminUserGet(long userId) {
            return base.Channel.AdminUserGet(userId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.User> AdminUserGetAsync(long userId) {
            return base.Channel.AdminUserGetAsync(userId);
        }
        
        public BB_8.WebApiNetTerrain.User AdminUserGetByName(string userName) {
            return base.Channel.AdminUserGetByName(userName);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.User> AdminUserGetByNameAsync(string userName) {
            return base.Channel.AdminUserGetByNameAsync(userName);
        }
        
        public void AdminUserSetPassword(long userId, string password) {
            base.Channel.AdminUserSetPassword(userId, password);
        }
        
        public System.Threading.Tasks.Task AdminUserSetPasswordAsync(long userId, string password) {
            return base.Channel.AdminUserSetPasswordAsync(userId, password);
        }
        
        public void AdminUserUpdate(BB_8.WebApiNetTerrain.User user) {
            base.Channel.AdminUserUpdate(user);
        }
        
        public System.Threading.Tasks.Task AdminUserUpdateAsync(BB_8.WebApiNetTerrain.User user) {
            return base.Channel.AdminUserUpdateAsync(user);
        }
        
        public long AdminGroupAdd(string name, BB_8.WebApiNetTerrain.Roles role) {
            return base.Channel.AdminGroupAdd(name, role);
        }
        
        public System.Threading.Tasks.Task<long> AdminGroupAddAsync(string name, BB_8.WebApiNetTerrain.Roles role) {
            return base.Channel.AdminGroupAddAsync(name, role);
        }
        
        public void AdminGroupDelete(long groupId) {
            base.Channel.AdminGroupDelete(groupId);
        }
        
        public System.Threading.Tasks.Task AdminGroupDeleteAsync(long groupId) {
            return base.Channel.AdminGroupDeleteAsync(groupId);
        }
        
        public BB_8.WebApiNetTerrain.Group AdminGroupGet(long groupId) {
            return base.Channel.AdminGroupGet(groupId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Group> AdminGroupGetAsync(long groupId) {
            return base.Channel.AdminGroupGetAsync(groupId);
        }
        
        public BB_8.WebApiNetTerrain.Group AdminGroupGetByName(string groupName) {
            return base.Channel.AdminGroupGetByName(groupName);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Group> AdminGroupGetByNameAsync(string groupName) {
            return base.Channel.AdminGroupGetByNameAsync(groupName);
        }
        
        public void AdminGroupUpdate(BB_8.WebApiNetTerrain.Group group) {
            base.Channel.AdminGroupUpdate(group);
        }
        
        public System.Threading.Tasks.Task AdminGroupUpdateAsync(BB_8.WebApiNetTerrain.Group group) {
            return base.Channel.AdminGroupUpdateAsync(group);
        }
        
        public void TestConnection() {
            base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public void LinkDelete(long linkId) {
            base.Channel.LinkDelete(linkId);
        }
        
        public System.Threading.Tasks.Task LinkDeleteAsync(long linkId) {
            return base.Channel.LinkDeleteAsync(linkId);
        }
        
        public string LinkGetPropertyValue(long linkId, long linkPropertyId) {
            return base.Channel.LinkGetPropertyValue(linkId, linkPropertyId);
        }
        
        public System.Threading.Tasks.Task<string> LinkGetPropertyValueAsync(long linkId, long linkPropertyId) {
            return base.Channel.LinkGetPropertyValueAsync(linkId, linkPropertyId);
        }
        
        public string LinkGetPropertyValueByName(long linkId, string linkPropertyName) {
            return base.Channel.LinkGetPropertyValueByName(linkId, linkPropertyName);
        }
        
        public System.Threading.Tasks.Task<string> LinkGetPropertyValueByNameAsync(long linkId, string linkPropertyName) {
            return base.Channel.LinkGetPropertyValueByNameAsync(linkId, linkPropertyName);
        }
        
        public long LinkGetTypeId(long linkId) {
            return base.Channel.LinkGetTypeId(linkId);
        }
        
        public System.Threading.Tasks.Task<long> LinkGetTypeIdAsync(long linkId) {
            return base.Channel.LinkGetTypeIdAsync(linkId);
        }
        
        public long LinkInsert(string name, long typeId, long node1Id, long node2Id) {
            return base.Channel.LinkInsert(name, typeId, node1Id, node2Id);
        }
        
        public System.Threading.Tasks.Task<long> LinkInsertAsync(string name, long typeId, long node1Id, long node2Id) {
            return base.Channel.LinkInsertAsync(name, typeId, node1Id, node2Id);
        }
        
        public void LinkPropertyUpdate(long linkId, long propertyId, string value) {
            base.Channel.LinkPropertyUpdate(linkId, propertyId, value);
        }
        
        public System.Threading.Tasks.Task LinkPropertyUpdateAsync(long linkId, long propertyId, string value) {
            return base.Channel.LinkPropertyUpdateAsync(linkId, propertyId, value);
        }
        
        public void NodeDelete(long nodeId) {
            base.Channel.NodeDelete(nodeId);
        }
        
        public System.Threading.Tasks.Task NodeDeleteAsync(long nodeId) {
            return base.Channel.NodeDeleteAsync(nodeId);
        }
        
        public string NodeGetPropertyValue(long nodeId, long nodePropertyId) {
            return base.Channel.NodeGetPropertyValue(nodeId, nodePropertyId);
        }
        
        public System.Threading.Tasks.Task<string> NodeGetPropertyValueAsync(long nodeId, long nodePropertyId) {
            return base.Channel.NodeGetPropertyValueAsync(nodeId, nodePropertyId);
        }
        
        public string NodeGetPropertyValueByName(long nodeId, string nodePropertyName) {
            return base.Channel.NodeGetPropertyValueByName(nodeId, nodePropertyName);
        }
        
        public System.Threading.Tasks.Task<string> NodeGetPropertyValueByNameAsync(long nodeId, string nodePropertyName) {
            return base.Channel.NodeGetPropertyValueByNameAsync(nodeId, nodePropertyName);
        }
        
        public long NodeGetTypeId(long nodeId) {
            return base.Channel.NodeGetTypeId(nodeId);
        }
        
        public System.Threading.Tasks.Task<long> NodeGetTypeIdAsync(long nodeId) {
            return base.Channel.NodeGetTypeIdAsync(nodeId);
        }
        
        public BB_8.WebApiNetTerrain.NodeTypeGroups NodeGetTypeGroup(long nodeId) {
            return base.Channel.NodeGetTypeGroup(nodeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeTypeGroups> NodeGetTypeGroupAsync(long nodeId) {
            return base.Channel.NodeGetTypeGroupAsync(nodeId);
        }
        
        public long NodeInsert(string name, long parentId, long typeId) {
            return base.Channel.NodeInsert(name, parentId, typeId);
        }
        
        public System.Threading.Tasks.Task<long> NodeInsertAsync(string name, long parentId, long typeId) {
            return base.Channel.NodeInsertAsync(name, parentId, typeId);
        }
        
        public void NodePropertyUpdate(long nodeId, long propertyId, string value) {
            base.Channel.NodePropertyUpdate(nodeId, propertyId, value);
        }
        
        public System.Threading.Tasks.Task NodePropertyUpdateAsync(long nodeId, long propertyId, string value) {
            return base.Channel.NodePropertyUpdateAsync(nodeId, propertyId, value);
        }
        
        public void NodeReparent(long nodeId, long newParentId) {
            base.Channel.NodeReparent(nodeId, newParentId);
        }
        
        public System.Threading.Tasks.Task NodeReparentAsync(long nodeId, long newParentId) {
            return base.Channel.NodeReparentAsync(nodeId, newParentId);
        }
        
        public void NodeSetCanMove(long diagramId, long nodeId, bool canMove) {
            base.Channel.NodeSetCanMove(diagramId, nodeId, canMove);
        }
        
        public System.Threading.Tasks.Task NodeSetCanMoveAsync(long diagramId, long nodeId, bool canMove) {
            return base.Channel.NodeSetCanMoveAsync(diagramId, nodeId, canMove);
        }
        
        public void NodeSetHeight(long diagramId, long nodeId, float height) {
            base.Channel.NodeSetHeight(diagramId, nodeId, height);
        }
        
        public System.Threading.Tasks.Task NodeSetHeightAsync(long diagramId, long nodeId, float height) {
            return base.Channel.NodeSetHeightAsync(diagramId, nodeId, height);
        }
        
        public void NodeSetWidth(long diagramId, long nodeId, float width) {
            base.Channel.NodeSetWidth(diagramId, nodeId, width);
        }
        
        public System.Threading.Tasks.Task NodeSetWidthAsync(long diagramId, long nodeId, float width) {
            return base.Channel.NodeSetWidthAsync(diagramId, nodeId, width);
        }
        
        public void NodeSetX(long diagramId, long nodeId, float x) {
            base.Channel.NodeSetX(diagramId, nodeId, x);
        }
        
        public System.Threading.Tasks.Task NodeSetXAsync(long diagramId, long nodeId, float x) {
            return base.Channel.NodeSetXAsync(diagramId, nodeId, x);
        }
        
        public void NodeSetY(long diagramId, long nodeId, float y) {
            base.Channel.NodeSetY(diagramId, nodeId, y);
        }
        
        public System.Threading.Tasks.Task NodeSetYAsync(long diagramId, long nodeId, float y) {
            return base.Channel.NodeSetYAsync(diagramId, nodeId, y);
        }
        
        public long[] NodesGetByName(string nodeName) {
            return base.Channel.NodesGetByName(nodeName);
        }
        
        public System.Threading.Tasks.Task<long[]> NodesGetByNameAsync(string nodeName) {
            return base.Channel.NodesGetByNameAsync(nodeName);
        }
        
        public void VisNodeSetAttribute(long diagramId, long nodeId, System.Collections.Generic.Dictionary<string, string> attributes) {
            base.Channel.VisNodeSetAttribute(diagramId, nodeId, attributes);
        }
        
        public System.Threading.Tasks.Task VisNodeSetAttributeAsync(long diagramId, long nodeId, System.Collections.Generic.Dictionary<string, string> attributes) {
            return base.Channel.VisNodeSetAttributeAsync(diagramId, nodeId, attributes);
        }
        
        public string[] GetDatabaseValues(string table, string columnName, string columnValue, string resultColumnName) {
            return base.Channel.GetDatabaseValues(table, columnName, columnValue, resultColumnName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDatabaseValuesAsync(string table, string columnName, string columnValue, string resultColumnName) {
            return base.Channel.GetDatabaseValuesAsync(table, columnName, columnValue, resultColumnName);
        }
        
        public long CatalogSlotAdd(long nodeTypeId, string slotName) {
            return base.Channel.CatalogSlotAdd(nodeTypeId, slotName);
        }
        
        public System.Threading.Tasks.Task<long> CatalogSlotAddAsync(long nodeTypeId, string slotName) {
            return base.Channel.CatalogSlotAddAsync(nodeTypeId, slotName);
        }
        
        public void CatalogSlotDelete(long slotId) {
            base.Channel.CatalogSlotDelete(slotId);
        }
        
        public System.Threading.Tasks.Task CatalogSlotDeleteAsync(long slotId) {
            return base.Channel.CatalogSlotDeleteAsync(slotId);
        }
        
        public BB_8.WebApiNetTerrain.Slot CatalogSlotGet(long slotId) {
            return base.Channel.CatalogSlotGet(slotId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Slot> CatalogSlotGetAsync(long slotId) {
            return base.Channel.CatalogSlotGetAsync(slotId);
        }
        
        public long[] CatalogSlotsGetByNodeTypeId(long nodeTypeId) {
            return base.Channel.CatalogSlotsGetByNodeTypeId(nodeTypeId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogSlotsGetByNodeTypeIdAsync(long nodeTypeId) {
            return base.Channel.CatalogSlotsGetByNodeTypeIdAsync(nodeTypeId);
        }
        
        public void CatalogSlotUpdate(BB_8.WebApiNetTerrain.Slot slot) {
            base.Channel.CatalogSlotUpdate(slot);
        }
        
        public System.Threading.Tasks.Task CatalogSlotUpdateAsync(BB_8.WebApiNetTerrain.Slot slot) {
            return base.Channel.CatalogSlotUpdateAsync(slot);
        }
        
        public void CatalogSlotMapCardType(long slotId, long cardTypeId) {
            base.Channel.CatalogSlotMapCardType(slotId, cardTypeId);
        }
        
        public System.Threading.Tasks.Task CatalogSlotMapCardTypeAsync(long slotId, long cardTypeId) {
            return base.Channel.CatalogSlotMapCardTypeAsync(slotId, cardTypeId);
        }
        
        public void CatalogSlotUnmapCardType(long slotId, long cardTypeId) {
            base.Channel.CatalogSlotUnmapCardType(slotId, cardTypeId);
        }
        
        public System.Threading.Tasks.Task CatalogSlotUnmapCardTypeAsync(long slotId, long cardTypeId) {
            return base.Channel.CatalogSlotUnmapCardTypeAsync(slotId, cardTypeId);
        }
        
        public long[] CatalogSlotGetMappedCardTypes(long slotId) {
            return base.Channel.CatalogSlotGetMappedCardTypes(slotId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogSlotGetMappedCardTypesAsync(long slotId) {
            return base.Channel.CatalogSlotGetMappedCardTypesAsync(slotId);
        }
        
        public long[] CatalogSlotsGetAllWithMappedCardType(long cardTypeId) {
            return base.Channel.CatalogSlotsGetAllWithMappedCardType(cardTypeId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogSlotsGetAllWithMappedCardTypeAsync(long cardTypeId) {
            return base.Channel.CatalogSlotsGetAllWithMappedCardTypeAsync(cardTypeId);
        }
        
        public long CatalogRackContainerAdd(long rackTypeId, string rackContainerName) {
            return base.Channel.CatalogRackContainerAdd(rackTypeId, rackContainerName);
        }
        
        public System.Threading.Tasks.Task<long> CatalogRackContainerAddAsync(long rackTypeId, string rackContainerName) {
            return base.Channel.CatalogRackContainerAddAsync(rackTypeId, rackContainerName);
        }
        
        public void CatalogRackContainerDelete(long rackContainerId) {
            base.Channel.CatalogRackContainerDelete(rackContainerId);
        }
        
        public System.Threading.Tasks.Task CatalogRackContainerDeleteAsync(long rackContainerId) {
            return base.Channel.CatalogRackContainerDeleteAsync(rackContainerId);
        }
        
        public BB_8.WebApiNetTerrain.RackContainer CatalogRackContainerGet(long rackContainerId) {
            return base.Channel.CatalogRackContainerGet(rackContainerId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.RackContainer> CatalogRackContainerGetAsync(long rackContainerId) {
            return base.Channel.CatalogRackContainerGetAsync(rackContainerId);
        }
        
        public long[] CatalogRackContainersGetByRackTypeId(long rackTypeId) {
            return base.Channel.CatalogRackContainersGetByRackTypeId(rackTypeId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogRackContainersGetByRackTypeIdAsync(long rackTypeId) {
            return base.Channel.CatalogRackContainersGetByRackTypeIdAsync(rackTypeId);
        }
        
        public void CatalogRackContainerUpdate(BB_8.WebApiNetTerrain.RackContainer rackContainer) {
            base.Channel.CatalogRackContainerUpdate(rackContainer);
        }
        
        public System.Threading.Tasks.Task CatalogRackContainerUpdateAsync(BB_8.WebApiNetTerrain.RackContainer rackContainer) {
            return base.Channel.CatalogRackContainerUpdateAsync(rackContainer);
        }
        
        public BB_8.WebApiNetTerrain.Node DiagramNodeGet(long nodeId) {
            return base.Channel.DiagramNodeGet(nodeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Node> DiagramNodeGetAsync(long nodeId) {
            return base.Channel.DiagramNodeGetAsync(nodeId);
        }
        
        public BB_8.WebApiNetTerrain.Device DiagramDeviceGet(long deviceId) {
            return base.Channel.DiagramDeviceGet(deviceId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Device> DiagramDeviceGetAsync(long deviceId) {
            return base.Channel.DiagramDeviceGetAsync(deviceId);
        }
        
        public BB_8.WebApiNetTerrain.Rack DiagramRackGet(long rackId) {
            return base.Channel.DiagramRackGet(rackId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Rack> DiagramRackGetAsync(long rackId) {
            return base.Channel.DiagramRackGetAsync(rackId);
        }
        
        public BB_8.WebApiNetTerrain.VisNode DiagramVisNodeGet(long visNodeId) {
            return base.Channel.DiagramVisNodeGet(visNodeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.VisNode> DiagramVisNodeGetAsync(long visNodeId) {
            return base.Channel.DiagramVisNodeGetAsync(visNodeId);
        }
        
        public BB_8.WebApiNetTerrain.VisNode DiagramVisNodeGetByDiagramAndNodeId(long diagramId, long nodeId) {
            return base.Channel.DiagramVisNodeGetByDiagramAndNodeId(diagramId, nodeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.VisNode> DiagramVisNodeGetByDiagramAndNodeIdAsync(long diagramId, long nodeId) {
            return base.Channel.DiagramVisNodeGetByDiagramAndNodeIdAsync(diagramId, nodeId);
        }
        
        public void DiagramVisNodeUpdate(BB_8.WebApiNetTerrain.VisNode visNode) {
            base.Channel.DiagramVisNodeUpdate(visNode);
        }
        
        public System.Threading.Tasks.Task DiagramVisNodeUpdateAsync(BB_8.WebApiNetTerrain.VisNode visNode) {
            return base.Channel.DiagramVisNodeUpdateAsync(visNode);
        }
        
        public long CatalogPortAdd(long nodeTypeId, string portName) {
            return base.Channel.CatalogPortAdd(nodeTypeId, portName);
        }
        
        public System.Threading.Tasks.Task<long> CatalogPortAddAsync(long nodeTypeId, string portName) {
            return base.Channel.CatalogPortAddAsync(nodeTypeId, portName);
        }
        
        public void CatalogPortDelete(long portId) {
            base.Channel.CatalogPortDelete(portId);
        }
        
        public System.Threading.Tasks.Task CatalogPortDeleteAsync(long portId) {
            return base.Channel.CatalogPortDeleteAsync(portId);
        }
        
        public BB_8.WebApiNetTerrain.Port CatalogPortGet(long portId) {
            return base.Channel.CatalogPortGet(portId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Port> CatalogPortGetAsync(long portId) {
            return base.Channel.CatalogPortGetAsync(portId);
        }
        
        public long[] CatalogPortsGetByNodeTypeId(long nodeTypeId) {
            return base.Channel.CatalogPortsGetByNodeTypeId(nodeTypeId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogPortsGetByNodeTypeIdAsync(long nodeTypeId) {
            return base.Channel.CatalogPortsGetByNodeTypeIdAsync(nodeTypeId);
        }
        
        public void CatalogPortUpdate(BB_8.WebApiNetTerrain.Port port) {
            base.Channel.CatalogPortUpdate(port);
        }
        
        public System.Threading.Tasks.Task CatalogPortUpdateAsync(BB_8.WebApiNetTerrain.Port port) {
            return base.Channel.CatalogPortUpdateAsync(port);
        }
        
        public long CatalogAddLinkTypeProperty(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogAddLinkTypeProperty(linkTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public System.Threading.Tasks.Task<long> CatalogAddLinkTypePropertyAsync(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogAddLinkTypePropertyAsync(linkTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public long CatalogLinkTypePropertyAdd(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogLinkTypePropertyAdd(linkTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public System.Threading.Tasks.Task<long> CatalogLinkTypePropertyAddAsync(long linkTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogLinkTypePropertyAddAsync(linkTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public void CatalogLinkTypePropertyDelete(long linkTypePropertyId) {
            base.Channel.CatalogLinkTypePropertyDelete(linkTypePropertyId);
        }
        
        public System.Threading.Tasks.Task CatalogLinkTypePropertyDeleteAsync(long linkTypePropertyId) {
            return base.Channel.CatalogLinkTypePropertyDeleteAsync(linkTypePropertyId);
        }
        
        public BB_8.WebApiNetTerrain.LinkTypeProperty CatalogLinkTypePropertyGet(long linkTypePropertyId) {
            return base.Channel.CatalogLinkTypePropertyGet(linkTypePropertyId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkTypeProperty> CatalogLinkTypePropertyGetAsync(long linkTypePropertyId) {
            return base.Channel.CatalogLinkTypePropertyGetAsync(linkTypePropertyId);
        }
        
        public BB_8.WebApiNetTerrain.LinkTypeProperty CatalogLinkTypePropertyGetByName(string name, long linkTypeId) {
            return base.Channel.CatalogLinkTypePropertyGetByName(name, linkTypeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkTypeProperty> CatalogLinkTypePropertyGetByNameAsync(string name, long linkTypeId) {
            return base.Channel.CatalogLinkTypePropertyGetByNameAsync(name, linkTypeId);
        }
        
        public void CatalogLinkTypePropertyUpdate(BB_8.WebApiNetTerrain.LinkTypeProperty linkTypeProperty) {
            base.Channel.CatalogLinkTypePropertyUpdate(linkTypeProperty);
        }
        
        public System.Threading.Tasks.Task CatalogLinkTypePropertyUpdateAsync(BB_8.WebApiNetTerrain.LinkTypeProperty linkTypeProperty) {
            return base.Channel.CatalogLinkTypePropertyUpdateAsync(linkTypeProperty);
        }
        
        public System.Collections.Generic.Dictionary<long, string> CatalogGetLinkTypeProperties(long linkTypeId) {
            return base.Channel.CatalogGetLinkTypeProperties(linkTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> CatalogGetLinkTypePropertiesAsync(long linkTypeId) {
            return base.Channel.CatalogGetLinkTypePropertiesAsync(linkTypeId);
        }
        
        public long CatalogAddLinkType(string name, bool isFavorite, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle) {
            return base.Channel.CatalogAddLinkType(name, isFavorite, thickness, linkStyle);
        }
        
        public System.Threading.Tasks.Task<long> CatalogAddLinkTypeAsync(string name, bool isFavorite, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle) {
            return base.Channel.CatalogAddLinkTypeAsync(name, isFavorite, thickness, linkStyle);
        }
        
        public long CatalogLinkTypeAdd(string name, bool isFavorite) {
            return base.Channel.CatalogLinkTypeAdd(name, isFavorite);
        }
        
        public System.Threading.Tasks.Task<long> CatalogLinkTypeAddAsync(string name, bool isFavorite) {
            return base.Channel.CatalogLinkTypeAddAsync(name, isFavorite);
        }
        
        public long CatalogLinkTypeClone(long linkTypeId, string clonedTypeName) {
            return base.Channel.CatalogLinkTypeClone(linkTypeId, clonedTypeName);
        }
        
        public System.Threading.Tasks.Task<long> CatalogLinkTypeCloneAsync(long linkTypeId, string clonedTypeName) {
            return base.Channel.CatalogLinkTypeCloneAsync(linkTypeId, clonedTypeName);
        }
        
        public void CatalogLinkTypeDelete(long linkTypeId) {
            base.Channel.CatalogLinkTypeDelete(linkTypeId);
        }
        
        public System.Threading.Tasks.Task CatalogLinkTypeDeleteAsync(long linkTypeId) {
            return base.Channel.CatalogLinkTypeDeleteAsync(linkTypeId);
        }
        
        public BB_8.WebApiNetTerrain.LinkType CatalogLinkTypeGet(long linkTypeId) {
            return base.Channel.CatalogLinkTypeGet(linkTypeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkType> CatalogLinkTypeGetAsync(long linkTypeId) {
            return base.Channel.CatalogLinkTypeGetAsync(linkTypeId);
        }
        
        public BB_8.WebApiNetTerrain.LinkType CatalogLinkTypeGetByName(string linkTypeName) {
            return base.Channel.CatalogLinkTypeGetByName(linkTypeName);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkType> CatalogLinkTypeGetByNameAsync(string linkTypeName) {
            return base.Channel.CatalogLinkTypeGetByNameAsync(linkTypeName);
        }
        
        public long LinkTypeGetId(string linkTypeName) {
            return base.Channel.LinkTypeGetId(linkTypeName);
        }
        
        public System.Threading.Tasks.Task<long> LinkTypeGetIdAsync(string linkTypeName) {
            return base.Channel.LinkTypeGetIdAsync(linkTypeName);
        }
        
        public void CatalogLinkTypeUpdate(BB_8.WebApiNetTerrain.LinkType linkType) {
            base.Channel.CatalogLinkTypeUpdate(linkType);
        }
        
        public System.Threading.Tasks.Task CatalogLinkTypeUpdateAsync(BB_8.WebApiNetTerrain.LinkType linkType) {
            return base.Channel.CatalogLinkTypeUpdateAsync(linkType);
        }
        
        public long CatalogLinkOverrideAddListValue(long linkPropertyId, string listValue) {
            return base.Channel.CatalogLinkOverrideAddListValue(linkPropertyId, listValue);
        }
        
        public System.Threading.Tasks.Task<long> CatalogLinkOverrideAddListValueAsync(long linkPropertyId, string listValue) {
            return base.Channel.CatalogLinkOverrideAddListValueAsync(linkPropertyId, listValue);
        }
        
        public long CatalogLinkOverrideAdd(long linkPropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string color, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle, BB_8.WebApiNetTerrain.ArrowStyles startArrow, BB_8.WebApiNetTerrain.ArrowStyles endArrow) {
            return base.Channel.CatalogLinkOverrideAdd(linkPropertyId, isOverride, rule, listValue, color, thickness, linkStyle, startArrow, endArrow);
        }
        
        public System.Threading.Tasks.Task<long> CatalogLinkOverrideAddAsync(long linkPropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string color, float thickness, BB_8.WebApiNetTerrain.LinkStyles linkStyle, BB_8.WebApiNetTerrain.ArrowStyles startArrow, BB_8.WebApiNetTerrain.ArrowStyles endArrow) {
            return base.Channel.CatalogLinkOverrideAddAsync(linkPropertyId, isOverride, rule, listValue, color, thickness, linkStyle, startArrow, endArrow);
        }
        
        public void CatalogLinkOverrideDelete(long overrideId) {
            base.Channel.CatalogLinkOverrideDelete(overrideId);
        }
        
        public System.Threading.Tasks.Task CatalogLinkOverrideDeleteAsync(long overrideId) {
            return base.Channel.CatalogLinkOverrideDeleteAsync(overrideId);
        }
        
        public BB_8.WebApiNetTerrain.LinkOverride CatalogLinkOverrideGet(long overrideId) {
            return base.Channel.CatalogLinkOverrideGet(overrideId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkOverride> CatalogLinkOverrideGetAsync(long overrideId) {
            return base.Channel.CatalogLinkOverrideGetAsync(overrideId);
        }
        
        public BB_8.WebApiNetTerrain.LinkOverride CatalogLinkOverrideGetByListValue(long propertyId, string value) {
            return base.Channel.CatalogLinkOverrideGetByListValue(propertyId, value);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkOverride> CatalogLinkOverrideGetByListValueAsync(long propertyId, string value) {
            return base.Channel.CatalogLinkOverrideGetByListValueAsync(propertyId, value);
        }
        
        public void CatalogLinkOverrideUpdate(BB_8.WebApiNetTerrain.LinkOverride linkOverride) {
            base.Channel.CatalogLinkOverrideUpdate(linkOverride);
        }
        
        public System.Threading.Tasks.Task CatalogLinkOverrideUpdateAsync(BB_8.WebApiNetTerrain.LinkOverride linkOverride) {
            return base.Channel.CatalogLinkOverrideUpdateAsync(linkOverride);
        }
        
        public long[] CatalogLinkOverridesGetByPropertyId(long linkPropertyId) {
            return base.Channel.CatalogLinkOverridesGetByPropertyId(linkPropertyId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogLinkOverridesGetByPropertyIdAsync(long linkPropertyId) {
            return base.Channel.CatalogLinkOverridesGetByPropertyIdAsync(linkPropertyId);
        }
        
        public long[] CatalogLinkOverridesGetByTypeId(long linkTypeId) {
            return base.Channel.CatalogLinkOverridesGetByTypeId(linkTypeId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogLinkOverridesGetByTypeIdAsync(long linkTypeId) {
            return base.Channel.CatalogLinkOverridesGetByTypeIdAsync(linkTypeId);
        }
        
        public long CatalogLinkCategoryAdd(string name, long parentId, string imageFileName, bool isFavorite) {
            return base.Channel.CatalogLinkCategoryAdd(name, parentId, imageFileName, isFavorite);
        }
        
        public System.Threading.Tasks.Task<long> CatalogLinkCategoryAddAsync(string name, long parentId, string imageFileName, bool isFavorite) {
            return base.Channel.CatalogLinkCategoryAddAsync(name, parentId, imageFileName, isFavorite);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BB_8.WebApiNetTerrain.CatalogLinkCategoryUploadImageResponse BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogLinkCategoryUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogLinkCategoryUploadImage(request);
        }
        
        public void CatalogLinkCategoryUploadImage(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            BB_8.WebApiNetTerrain.CatalogLinkCategoryUploadImageResponse retVal = ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogLinkCategoryUploadImage(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogLinkCategoryUploadImageResponse> BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogLinkCategoryUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogLinkCategoryUploadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogLinkCategoryUploadImageResponse> CatalogLinkCategoryUploadImageAsync(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            return ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogLinkCategoryUploadImageAsync(inValue);
        }
        
        public void CatalogLinkCategoryDelete(long linkCategoryId) {
            base.Channel.CatalogLinkCategoryDelete(linkCategoryId);
        }
        
        public System.Threading.Tasks.Task CatalogLinkCategoryDeleteAsync(long linkCategoryId) {
            return base.Channel.CatalogLinkCategoryDeleteAsync(linkCategoryId);
        }
        
        public BB_8.WebApiNetTerrain.LinkCategory CatalogLinkCategoryGet(long linkCategoryId) {
            return base.Channel.CatalogLinkCategoryGet(linkCategoryId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkCategory> CatalogLinkCategoryGetAsync(long linkCategoryId) {
            return base.Channel.CatalogLinkCategoryGetAsync(linkCategoryId);
        }
        
        public BB_8.WebApiNetTerrain.LinkCategory CatalogLinkCategoryGetByName(string linkCategoryName) {
            return base.Channel.CatalogLinkCategoryGetByName(linkCategoryName);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.LinkCategory> CatalogLinkCategoryGetByNameAsync(string linkCategoryName) {
            return base.Channel.CatalogLinkCategoryGetByNameAsync(linkCategoryName);
        }
        
        public void CatalogLinkCategoryUpdate(BB_8.WebApiNetTerrain.LinkCategory linkCategory) {
            base.Channel.CatalogLinkCategoryUpdate(linkCategory);
        }
        
        public System.Threading.Tasks.Task CatalogLinkCategoryUpdateAsync(BB_8.WebApiNetTerrain.LinkCategory linkCategory) {
            return base.Channel.CatalogLinkCategoryUpdateAsync(linkCategory);
        }
        
        public long CatalogNodeOverrideAddListValue(long nodePropertyId, string listValue) {
            return base.Channel.CatalogNodeOverrideAddListValue(nodePropertyId, listValue);
        }
        
        public System.Threading.Tasks.Task<long> CatalogNodeOverrideAddListValueAsync(long nodePropertyId, string listValue) {
            return base.Channel.CatalogNodeOverrideAddListValueAsync(nodePropertyId, listValue);
        }
        
        public long CatalogNodeOverrideAdd(long nodePropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string imageFileName) {
            return base.Channel.CatalogNodeOverrideAdd(nodePropertyId, isOverride, rule, listValue, imageFileName);
        }
        
        public System.Threading.Tasks.Task<long> CatalogNodeOverrideAddAsync(long nodePropertyId, bool isOverride, BB_8.WebApiNetTerrain.OverrideRules rule, string listValue, string imageFileName) {
            return base.Channel.CatalogNodeOverrideAddAsync(nodePropertyId, isOverride, rule, listValue, imageFileName);
        }
        
        public void CatalogNodeOverrideDelete(long overrideId) {
            base.Channel.CatalogNodeOverrideDelete(overrideId);
        }
        
        public System.Threading.Tasks.Task CatalogNodeOverrideDeleteAsync(long overrideId) {
            return base.Channel.CatalogNodeOverrideDeleteAsync(overrideId);
        }
        
        public BB_8.WebApiNetTerrain.NodeOverride CatalogNodeOverrideGet(long overrideId) {
            return base.Channel.CatalogNodeOverrideGet(overrideId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeOverride> CatalogNodeOverrideGetAsync(long overrideId) {
            return base.Channel.CatalogNodeOverrideGetAsync(overrideId);
        }
        
        public BB_8.WebApiNetTerrain.NodeOverride CatalogNodeOverrideGetByListValue(long propertyId, string value) {
            return base.Channel.CatalogNodeOverrideGetByListValue(propertyId, value);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeOverride> CatalogNodeOverrideGetByListValueAsync(long propertyId, string value) {
            return base.Channel.CatalogNodeOverrideGetByListValueAsync(propertyId, value);
        }
        
        public void CatalogNodeOverrideUpdate(BB_8.WebApiNetTerrain.NodeOverride nodeOverride) {
            base.Channel.CatalogNodeOverrideUpdate(nodeOverride);
        }
        
        public System.Threading.Tasks.Task CatalogNodeOverrideUpdateAsync(BB_8.WebApiNetTerrain.NodeOverride nodeOverride) {
            return base.Channel.CatalogNodeOverrideUpdateAsync(nodeOverride);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BB_8.WebApiNetTerrain.CatalogNodeOverrideUploadImageResponse BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeOverrideUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeOverrideUploadImage(request);
        }
        
        public void CatalogNodeOverrideUploadImage(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            BB_8.WebApiNetTerrain.CatalogNodeOverrideUploadImageResponse retVal = ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeOverrideUploadImage(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeOverrideUploadImageResponse> BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeOverrideUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeOverrideUploadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeOverrideUploadImageResponse> CatalogNodeOverrideUploadImageAsync(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            return ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeOverrideUploadImageAsync(inValue);
        }
        
        public long[] CatalogNodeOverridesGetByPropertyId(long nodePropertyId) {
            return base.Channel.CatalogNodeOverridesGetByPropertyId(nodePropertyId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogNodeOverridesGetByPropertyIdAsync(long nodePropertyId) {
            return base.Channel.CatalogNodeOverridesGetByPropertyIdAsync(nodePropertyId);
        }
        
        public long[] CatalogNodeOverridesGetByTypeId(long nodeTypeId) {
            return base.Channel.CatalogNodeOverridesGetByTypeId(nodeTypeId);
        }
        
        public System.Threading.Tasks.Task<long[]> CatalogNodeOverridesGetByTypeIdAsync(long nodeTypeId) {
            return base.Channel.CatalogNodeOverridesGetByTypeIdAsync(nodeTypeId);
        }
        
        public long CatalogNodeTypePropertyAdd(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogNodeTypePropertyAdd(nodeTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public System.Threading.Tasks.Task<long> CatalogNodeTypePropertyAddAsync(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogNodeTypePropertyAddAsync(nodeTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public long CatalogAddNodeTypeProperty(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogAddNodeTypeProperty(nodeTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public System.Threading.Tasks.Task<long> CatalogAddNodeTypePropertyAsync(long nodeTypeId, string propertyName, string defaultValue, bool isMandatory, bool isDisplayed, bool isInProperties) {
            return base.Channel.CatalogAddNodeTypePropertyAsync(nodeTypeId, propertyName, defaultValue, isMandatory, isDisplayed, isInProperties);
        }
        
        public void CatalogNodeTypePropertyDelete(long nodeTypePropertyId) {
            base.Channel.CatalogNodeTypePropertyDelete(nodeTypePropertyId);
        }
        
        public System.Threading.Tasks.Task CatalogNodeTypePropertyDeleteAsync(long nodeTypePropertyId) {
            return base.Channel.CatalogNodeTypePropertyDeleteAsync(nodeTypePropertyId);
        }
        
        public BB_8.WebApiNetTerrain.NodeTypeProperty CatalogNodeTypePropertyGet(long nodeTypePropertyId) {
            return base.Channel.CatalogNodeTypePropertyGet(nodeTypePropertyId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeTypeProperty> CatalogNodeTypePropertyGetAsync(long nodeTypePropertyId) {
            return base.Channel.CatalogNodeTypePropertyGetAsync(nodeTypePropertyId);
        }
        
        public BB_8.WebApiNetTerrain.NodeTypeProperty CatalogNodeTypePropertyGetByName(string name, long nodeTypeId) {
            return base.Channel.CatalogNodeTypePropertyGetByName(name, nodeTypeId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeTypeProperty> CatalogNodeTypePropertyGetByNameAsync(string name, long nodeTypeId) {
            return base.Channel.CatalogNodeTypePropertyGetByNameAsync(name, nodeTypeId);
        }
        
        public void CatalogNodeTypePropertyUpdate(BB_8.WebApiNetTerrain.NodeTypeProperty nodeTypeProperty) {
            base.Channel.CatalogNodeTypePropertyUpdate(nodeTypeProperty);
        }
        
        public System.Threading.Tasks.Task CatalogNodeTypePropertyUpdateAsync(BB_8.WebApiNetTerrain.NodeTypeProperty nodeTypeProperty) {
            return base.Channel.CatalogNodeTypePropertyUpdateAsync(nodeTypeProperty);
        }
        
        public System.Collections.Generic.Dictionary<long, string> CatalogGetNodeTypeProperties(long nodeTypeId) {
            return base.Channel.CatalogGetNodeTypeProperties(nodeTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<long, string>> CatalogGetNodeTypePropertiesAsync(long nodeTypeId) {
            return base.Channel.CatalogGetNodeTypePropertiesAsync(nodeTypeId);
        }
        
        public long CatalogVendorAdd(string vendorName) {
            return base.Channel.CatalogVendorAdd(vendorName);
        }
        
        public System.Threading.Tasks.Task<long> CatalogVendorAddAsync(string vendorName) {
            return base.Channel.CatalogVendorAddAsync(vendorName);
        }
        
        public void CatalogVendorDelete(long vendorId) {
            base.Channel.CatalogVendorDelete(vendorId);
        }
        
        public System.Threading.Tasks.Task CatalogVendorDeleteAsync(long vendorId) {
            return base.Channel.CatalogVendorDeleteAsync(vendorId);
        }
        
        public BB_8.WebApiNetTerrain.Vendor CatalogVendorGet(long vendorId) {
            return base.Channel.CatalogVendorGet(vendorId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Vendor> CatalogVendorGetAsync(long vendorId) {
            return base.Channel.CatalogVendorGetAsync(vendorId);
        }
        
        public BB_8.WebApiNetTerrain.Vendor CatalogVendorGetByName(string vendorName) {
            return base.Channel.CatalogVendorGetByName(vendorName);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.Vendor> CatalogVendorGetByNameAsync(string vendorName) {
            return base.Channel.CatalogVendorGetByNameAsync(vendorName);
        }
        
        public void CatalogVendorUpdate(BB_8.WebApiNetTerrain.Vendor vendor) {
            base.Channel.CatalogVendorUpdate(vendor);
        }
        
        public System.Threading.Tasks.Task CatalogVendorUpdateAsync(BB_8.WebApiNetTerrain.Vendor vendor) {
            return base.Channel.CatalogVendorUpdateAsync(vendor);
        }
        
        public long CatalogNodeCategoryAdd(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, long parentId, string imageFileName, bool isFavorite) {
            return base.Channel.CatalogNodeCategoryAdd(name, typeGroup, parentId, imageFileName, isFavorite);
        }
        
        public System.Threading.Tasks.Task<long> CatalogNodeCategoryAddAsync(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, long parentId, string imageFileName, bool isFavorite) {
            return base.Channel.CatalogNodeCategoryAddAsync(name, typeGroup, parentId, imageFileName, isFavorite);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BB_8.WebApiNetTerrain.CatalogNodeCategoryUploadImageResponse BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeCategoryUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeCategoryUploadImage(request);
        }
        
        public void CatalogNodeCategoryUploadImage(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            BB_8.WebApiNetTerrain.CatalogNodeCategoryUploadImageResponse retVal = ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeCategoryUploadImage(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeCategoryUploadImageResponse> BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeCategoryUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeCategoryUploadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeCategoryUploadImageResponse> CatalogNodeCategoryUploadImageAsync(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            return ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeCategoryUploadImageAsync(inValue);
        }
        
        public void CatalogNodeCategoryDelete(long nodeCategoryId) {
            base.Channel.CatalogNodeCategoryDelete(nodeCategoryId);
        }
        
        public System.Threading.Tasks.Task CatalogNodeCategoryDeleteAsync(long nodeCategoryId) {
            return base.Channel.CatalogNodeCategoryDeleteAsync(nodeCategoryId);
        }
        
        public BB_8.WebApiNetTerrain.NodeCategory CatalogNodeCategoryGet(long nodeCategoryId) {
            return base.Channel.CatalogNodeCategoryGet(nodeCategoryId);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeCategory> CatalogNodeCategoryGetAsync(long nodeCategoryId) {
            return base.Channel.CatalogNodeCategoryGetAsync(nodeCategoryId);
        }
        
        public BB_8.WebApiNetTerrain.NodeCategory CatalogNodeCategoryGetByName(string nodeCategoryName) {
            return base.Channel.CatalogNodeCategoryGetByName(nodeCategoryName);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.NodeCategory> CatalogNodeCategoryGetByNameAsync(string nodeCategoryName) {
            return base.Channel.CatalogNodeCategoryGetByNameAsync(nodeCategoryName);
        }
        
        public void CatalogNodeCategoryUpdate(BB_8.WebApiNetTerrain.NodeCategory nodeCategory) {
            base.Channel.CatalogNodeCategoryUpdate(nodeCategory);
        }
        
        public System.Threading.Tasks.Task CatalogNodeCategoryUpdateAsync(BB_8.WebApiNetTerrain.NodeCategory nodeCategory) {
            return base.Channel.CatalogNodeCategoryUpdateAsync(nodeCategory);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BB_8.WebApiNetTerrain.CatalogAddNodeTypeResponse BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogAddNodeType(BB_8.WebApiNetTerrain.NewNodeTypeInfo1 request) {
            return base.Channel.CatalogAddNodeType(request);
        }
        
        public void CatalogAddNodeType(float DefaultHeight, float DefaultWidth, string ImageFileName, bool IsEnabled, bool IsFavourite, string Name, int TypeGroupNumber, System.IO.Stream ImageByteStream) {
            BB_8.WebApiNetTerrain.NewNodeTypeInfo1 inValue = new BB_8.WebApiNetTerrain.NewNodeTypeInfo1();
            inValue.DefaultHeight = DefaultHeight;
            inValue.DefaultWidth = DefaultWidth;
            inValue.ImageFileName = ImageFileName;
            inValue.IsEnabled = IsEnabled;
            inValue.IsFavourite = IsFavourite;
            inValue.Name = Name;
            inValue.TypeGroupNumber = TypeGroupNumber;
            inValue.ImageByteStream = ImageByteStream;
            BB_8.WebApiNetTerrain.CatalogAddNodeTypeResponse retVal = ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogAddNodeType(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogAddNodeTypeResponse> BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogAddNodeTypeAsync(BB_8.WebApiNetTerrain.NewNodeTypeInfo1 request) {
            return base.Channel.CatalogAddNodeTypeAsync(request);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogAddNodeTypeResponse> CatalogAddNodeTypeAsync(float DefaultHeight, float DefaultWidth, string ImageFileName, bool IsEnabled, bool IsFavourite, string Name, int TypeGroupNumber, System.IO.Stream ImageByteStream) {
            BB_8.WebApiNetTerrain.NewNodeTypeInfo1 inValue = new BB_8.WebApiNetTerrain.NewNodeTypeInfo1();
            inValue.DefaultHeight = DefaultHeight;
            inValue.DefaultWidth = DefaultWidth;
            inValue.ImageFileName = ImageFileName;
            inValue.IsEnabled = IsEnabled;
            inValue.IsFavourite = IsFavourite;
            inValue.Name = Name;
            inValue.TypeGroupNumber = TypeGroupNumber;
            inValue.ImageByteStream = ImageByteStream;
            return ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogAddNodeTypeAsync(inValue);
        }
        
        public long CatalogNodeTypeAdd(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, string imageFileName, bool isFavorite) {
            return base.Channel.CatalogNodeTypeAdd(name, typeGroup, imageFileName, isFavorite);
        }
        
        public System.Threading.Tasks.Task<long> CatalogNodeTypeAddAsync(string name, BB_8.WebApiNetTerrain.NodeTypeGroups typeGroup, string imageFileName, bool isFavorite) {
            return base.Channel.CatalogNodeTypeAddAsync(name, typeGroup, imageFileName, isFavorite);
        }
        
        public long CatalogNodeTypeClone(long nodeTypeId, string clonedTypeName) {
            return base.Channel.CatalogNodeTypeClone(nodeTypeId, clonedTypeName);
        }
        
        public System.Threading.Tasks.Task<long> CatalogNodeTypeCloneAsync(long nodeTypeId, string clonedTypeName) {
            return base.Channel.CatalogNodeTypeCloneAsync(nodeTypeId, clonedTypeName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BB_8.WebApiNetTerrain.CatalogNodeTypeUploadImageResponse BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeTypeUploadImage(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeTypeUploadImage(request);
        }
        
        public void CatalogNodeTypeUploadImage(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            BB_8.WebApiNetTerrain.CatalogNodeTypeUploadImageResponse retVal = ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeTypeUploadImage(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeTypeUploadImageResponse> BB_8.WebApiNetTerrain.INetTerrainWebApi.CatalogNodeTypeUploadImageAsync(BB_8.WebApiNetTerrain.FileUploadAttributes1 request) {
            return base.Channel.CatalogNodeTypeUploadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<BB_8.WebApiNetTerrain.CatalogNodeTypeUploadImageResponse> CatalogNodeTypeUploadImageAsync(string FileName, long ObjectId, System.IO.Stream FileByteStream) {
            BB_8.WebApiNetTerrain.FileUploadAttributes1 inValue = new BB_8.WebApiNetTerrain.FileUploadAttributes1();
            inValue.FileName = FileName;
            inValue.ObjectId = ObjectId;
            inValue.FileByteStream = FileByteStream;
            return ((BB_8.WebApiNetTerrain.INetTerrainWebApi)(this)).CatalogNodeTypeUploadImageAsync(inValue);
        }
    }
}
